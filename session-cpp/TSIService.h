/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef TSIService_H
#define TSIService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "rpc_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class TSIServiceIf {
 public:
  virtual ~TSIServiceIf() {}
  virtual void openSession(TSOpenSessionResp& _return, const TSOpenSessionReq& req) = 0;
  virtual void closeSession(TSStatus& _return, const TSCloseSessionReq& req) = 0;
  virtual void executeStatement(TSExecuteStatementResp& _return, const TSExecuteStatementReq& req) = 0;
  virtual void executeBatchStatement(TSExecuteBatchStatementResp& _return, const TSExecuteBatchStatementReq& req) = 0;
  virtual void executeQueryStatement(TSExecuteStatementResp& _return, const TSExecuteStatementReq& req) = 0;
  virtual void executeUpdateStatement(TSExecuteStatementResp& _return, const TSExecuteStatementReq& req) = 0;
  virtual void fetchResults(TSFetchResultsResp& _return, const TSFetchResultsReq& req) = 0;
  virtual void fetchMetadata(TSFetchMetadataResp& _return, const TSFetchMetadataReq& req) = 0;
  virtual void cancelOperation(TSStatus& _return, const TSCancelOperationReq& req) = 0;
  virtual void closeOperation(TSStatus& _return, const TSCloseOperationReq& req) = 0;
  virtual void getTimeZone(TSGetTimeZoneResp& _return) = 0;
  virtual void setTimeZone(TSStatus& _return, const TSSetTimeZoneReq& req) = 0;
  virtual void getProperties(ServerProperties& _return) = 0;
  virtual void insert(TSExecuteStatementResp& _return, const TSInsertionReq& req) = 0;
  virtual void insertBatch(TSExecuteBatchStatementResp& _return, const TSBatchInsertionReq& req) = 0;
  virtual void setStorageGroup(TSStatus& _return, const std::string& storageGroup) = 0;
  virtual void createTimeseries(TSStatus& _return, const TSCreateTimeseriesReq& req) = 0;
  virtual void deleteTimeseries(TSStatus& _return, const std::vector<std::string> & path) = 0;
  virtual void insertRow(TSStatus& _return, const TSInsertReq& req) = 0;
  virtual void deleteData(TSStatus& _return, const TSDeleteDataReq& req) = 0;
  virtual int64_t requestStatementId() = 0;
};

class TSIServiceIfFactory {
 public:
  typedef TSIServiceIf Handler;

  virtual ~TSIServiceIfFactory() {}

  virtual TSIServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(TSIServiceIf* /* handler */) = 0;
};

class TSIServiceIfSingletonFactory : virtual public TSIServiceIfFactory {
 public:
  TSIServiceIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<TSIServiceIf>& iface) : iface_(iface) {}
  virtual ~TSIServiceIfSingletonFactory() {}

  virtual TSIServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(TSIServiceIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<TSIServiceIf> iface_;
};

class TSIServiceNull : virtual public TSIServiceIf {
 public:
  virtual ~TSIServiceNull() {}
  void openSession(TSOpenSessionResp& /* _return */, const TSOpenSessionReq& /* req */) {
    return;
  }
  void closeSession(TSStatus& /* _return */, const TSCloseSessionReq& /* req */) {
    return;
  }
  void executeStatement(TSExecuteStatementResp& /* _return */, const TSExecuteStatementReq& /* req */) {
    return;
  }
  void executeBatchStatement(TSExecuteBatchStatementResp& /* _return */, const TSExecuteBatchStatementReq& /* req */) {
    return;
  }
  void executeQueryStatement(TSExecuteStatementResp& /* _return */, const TSExecuteStatementReq& /* req */) {
    return;
  }
  void executeUpdateStatement(TSExecuteStatementResp& /* _return */, const TSExecuteStatementReq& /* req */) {
    return;
  }
  void fetchResults(TSFetchResultsResp& /* _return */, const TSFetchResultsReq& /* req */) {
    return;
  }
  void fetchMetadata(TSFetchMetadataResp& /* _return */, const TSFetchMetadataReq& /* req */) {
    return;
  }
  void cancelOperation(TSStatus& /* _return */, const TSCancelOperationReq& /* req */) {
    return;
  }
  void closeOperation(TSStatus& /* _return */, const TSCloseOperationReq& /* req */) {
    return;
  }
  void getTimeZone(TSGetTimeZoneResp& /* _return */) {
    return;
  }
  void setTimeZone(TSStatus& /* _return */, const TSSetTimeZoneReq& /* req */) {
    return;
  }
  void getProperties(ServerProperties& /* _return */) {
    return;
  }
  void insert(TSExecuteStatementResp& /* _return */, const TSInsertionReq& /* req */) {
    return;
  }
  void insertBatch(TSExecuteBatchStatementResp& /* _return */, const TSBatchInsertionReq& /* req */) {
    return;
  }
  void setStorageGroup(TSStatus& /* _return */, const std::string& /* storageGroup */) {
    return;
  }
  void createTimeseries(TSStatus& /* _return */, const TSCreateTimeseriesReq& /* req */) {
    return;
  }
  void deleteTimeseries(TSStatus& /* _return */, const std::vector<std::string> & /* path */) {
    return;
  }
  void insertRow(TSStatus& /* _return */, const TSInsertReq& /* req */) {
    return;
  }
  void deleteData(TSStatus& /* _return */, const TSDeleteDataReq& /* req */) {
    return;
  }
  int64_t requestStatementId() {
    int64_t _return = 0;
    return _return;
  }
};

typedef struct _TSIService_openSession_args__isset {
  _TSIService_openSession_args__isset() : req(false) {}
  bool req :1;
} _TSIService_openSession_args__isset;

class TSIService_openSession_args {
 public:

  TSIService_openSession_args(const TSIService_openSession_args&);
  TSIService_openSession_args& operator=(const TSIService_openSession_args&);
  TSIService_openSession_args() {
  }

  virtual ~TSIService_openSession_args() throw();
  TSOpenSessionReq req;

  _TSIService_openSession_args__isset __isset;

  void __set_req(const TSOpenSessionReq& val);

  bool operator == (const TSIService_openSession_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const TSIService_openSession_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TSIService_openSession_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TSIService_openSession_pargs {
 public:


  virtual ~TSIService_openSession_pargs() throw();
  const TSOpenSessionReq* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TSIService_openSession_result__isset {
  _TSIService_openSession_result__isset() : success(false) {}
  bool success :1;
} _TSIService_openSession_result__isset;

class TSIService_openSession_result {
 public:

  TSIService_openSession_result(const TSIService_openSession_result&);
  TSIService_openSession_result& operator=(const TSIService_openSession_result&);
  TSIService_openSession_result() {
  }

  virtual ~TSIService_openSession_result() throw();
  TSOpenSessionResp success;

  _TSIService_openSession_result__isset __isset;

  void __set_success(const TSOpenSessionResp& val);

  bool operator == (const TSIService_openSession_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TSIService_openSession_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TSIService_openSession_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TSIService_openSession_presult__isset {
  _TSIService_openSession_presult__isset() : success(false) {}
  bool success :1;
} _TSIService_openSession_presult__isset;

class TSIService_openSession_presult {
 public:


  virtual ~TSIService_openSession_presult() throw();
  TSOpenSessionResp* success;

  _TSIService_openSession_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TSIService_closeSession_args__isset {
  _TSIService_closeSession_args__isset() : req(false) {}
  bool req :1;
} _TSIService_closeSession_args__isset;

class TSIService_closeSession_args {
 public:

  TSIService_closeSession_args(const TSIService_closeSession_args&);
  TSIService_closeSession_args& operator=(const TSIService_closeSession_args&);
  TSIService_closeSession_args() {
  }

  virtual ~TSIService_closeSession_args() throw();
  TSCloseSessionReq req;

  _TSIService_closeSession_args__isset __isset;

  void __set_req(const TSCloseSessionReq& val);

  bool operator == (const TSIService_closeSession_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const TSIService_closeSession_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TSIService_closeSession_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TSIService_closeSession_pargs {
 public:


  virtual ~TSIService_closeSession_pargs() throw();
  const TSCloseSessionReq* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TSIService_closeSession_result__isset {
  _TSIService_closeSession_result__isset() : success(false) {}
  bool success :1;
} _TSIService_closeSession_result__isset;

class TSIService_closeSession_result {
 public:

  TSIService_closeSession_result(const TSIService_closeSession_result&);
  TSIService_closeSession_result& operator=(const TSIService_closeSession_result&);
  TSIService_closeSession_result() {
  }

  virtual ~TSIService_closeSession_result() throw();
  TSStatus success;

  _TSIService_closeSession_result__isset __isset;

  void __set_success(const TSStatus& val);

  bool operator == (const TSIService_closeSession_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TSIService_closeSession_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TSIService_closeSession_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TSIService_closeSession_presult__isset {
  _TSIService_closeSession_presult__isset() : success(false) {}
  bool success :1;
} _TSIService_closeSession_presult__isset;

class TSIService_closeSession_presult {
 public:


  virtual ~TSIService_closeSession_presult() throw();
  TSStatus* success;

  _TSIService_closeSession_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TSIService_executeStatement_args__isset {
  _TSIService_executeStatement_args__isset() : req(false) {}
  bool req :1;
} _TSIService_executeStatement_args__isset;

class TSIService_executeStatement_args {
 public:

  TSIService_executeStatement_args(const TSIService_executeStatement_args&);
  TSIService_executeStatement_args& operator=(const TSIService_executeStatement_args&);
  TSIService_executeStatement_args() {
  }

  virtual ~TSIService_executeStatement_args() throw();
  TSExecuteStatementReq req;

  _TSIService_executeStatement_args__isset __isset;

  void __set_req(const TSExecuteStatementReq& val);

  bool operator == (const TSIService_executeStatement_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const TSIService_executeStatement_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TSIService_executeStatement_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TSIService_executeStatement_pargs {
 public:


  virtual ~TSIService_executeStatement_pargs() throw();
  const TSExecuteStatementReq* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TSIService_executeStatement_result__isset {
  _TSIService_executeStatement_result__isset() : success(false) {}
  bool success :1;
} _TSIService_executeStatement_result__isset;

class TSIService_executeStatement_result {
 public:

  TSIService_executeStatement_result(const TSIService_executeStatement_result&);
  TSIService_executeStatement_result& operator=(const TSIService_executeStatement_result&);
  TSIService_executeStatement_result() {
  }

  virtual ~TSIService_executeStatement_result() throw();
  TSExecuteStatementResp success;

  _TSIService_executeStatement_result__isset __isset;

  void __set_success(const TSExecuteStatementResp& val);

  bool operator == (const TSIService_executeStatement_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TSIService_executeStatement_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TSIService_executeStatement_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TSIService_executeStatement_presult__isset {
  _TSIService_executeStatement_presult__isset() : success(false) {}
  bool success :1;
} _TSIService_executeStatement_presult__isset;

class TSIService_executeStatement_presult {
 public:


  virtual ~TSIService_executeStatement_presult() throw();
  TSExecuteStatementResp* success;

  _TSIService_executeStatement_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TSIService_executeBatchStatement_args__isset {
  _TSIService_executeBatchStatement_args__isset() : req(false) {}
  bool req :1;
} _TSIService_executeBatchStatement_args__isset;

class TSIService_executeBatchStatement_args {
 public:

  TSIService_executeBatchStatement_args(const TSIService_executeBatchStatement_args&);
  TSIService_executeBatchStatement_args& operator=(const TSIService_executeBatchStatement_args&);
  TSIService_executeBatchStatement_args() {
  }

  virtual ~TSIService_executeBatchStatement_args() throw();
  TSExecuteBatchStatementReq req;

  _TSIService_executeBatchStatement_args__isset __isset;

  void __set_req(const TSExecuteBatchStatementReq& val);

  bool operator == (const TSIService_executeBatchStatement_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const TSIService_executeBatchStatement_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TSIService_executeBatchStatement_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TSIService_executeBatchStatement_pargs {
 public:


  virtual ~TSIService_executeBatchStatement_pargs() throw();
  const TSExecuteBatchStatementReq* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TSIService_executeBatchStatement_result__isset {
  _TSIService_executeBatchStatement_result__isset() : success(false) {}
  bool success :1;
} _TSIService_executeBatchStatement_result__isset;

class TSIService_executeBatchStatement_result {
 public:

  TSIService_executeBatchStatement_result(const TSIService_executeBatchStatement_result&);
  TSIService_executeBatchStatement_result& operator=(const TSIService_executeBatchStatement_result&);
  TSIService_executeBatchStatement_result() {
  }

  virtual ~TSIService_executeBatchStatement_result() throw();
  TSExecuteBatchStatementResp success;

  _TSIService_executeBatchStatement_result__isset __isset;

  void __set_success(const TSExecuteBatchStatementResp& val);

  bool operator == (const TSIService_executeBatchStatement_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TSIService_executeBatchStatement_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TSIService_executeBatchStatement_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TSIService_executeBatchStatement_presult__isset {
  _TSIService_executeBatchStatement_presult__isset() : success(false) {}
  bool success :1;
} _TSIService_executeBatchStatement_presult__isset;

class TSIService_executeBatchStatement_presult {
 public:


  virtual ~TSIService_executeBatchStatement_presult() throw();
  TSExecuteBatchStatementResp* success;

  _TSIService_executeBatchStatement_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TSIService_executeQueryStatement_args__isset {
  _TSIService_executeQueryStatement_args__isset() : req(false) {}
  bool req :1;
} _TSIService_executeQueryStatement_args__isset;

class TSIService_executeQueryStatement_args {
 public:

  TSIService_executeQueryStatement_args(const TSIService_executeQueryStatement_args&);
  TSIService_executeQueryStatement_args& operator=(const TSIService_executeQueryStatement_args&);
  TSIService_executeQueryStatement_args() {
  }

  virtual ~TSIService_executeQueryStatement_args() throw();
  TSExecuteStatementReq req;

  _TSIService_executeQueryStatement_args__isset __isset;

  void __set_req(const TSExecuteStatementReq& val);

  bool operator == (const TSIService_executeQueryStatement_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const TSIService_executeQueryStatement_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TSIService_executeQueryStatement_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TSIService_executeQueryStatement_pargs {
 public:


  virtual ~TSIService_executeQueryStatement_pargs() throw();
  const TSExecuteStatementReq* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TSIService_executeQueryStatement_result__isset {
  _TSIService_executeQueryStatement_result__isset() : success(false) {}
  bool success :1;
} _TSIService_executeQueryStatement_result__isset;

class TSIService_executeQueryStatement_result {
 public:

  TSIService_executeQueryStatement_result(const TSIService_executeQueryStatement_result&);
  TSIService_executeQueryStatement_result& operator=(const TSIService_executeQueryStatement_result&);
  TSIService_executeQueryStatement_result() {
  }

  virtual ~TSIService_executeQueryStatement_result() throw();
  TSExecuteStatementResp success;

  _TSIService_executeQueryStatement_result__isset __isset;

  void __set_success(const TSExecuteStatementResp& val);

  bool operator == (const TSIService_executeQueryStatement_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TSIService_executeQueryStatement_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TSIService_executeQueryStatement_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TSIService_executeQueryStatement_presult__isset {
  _TSIService_executeQueryStatement_presult__isset() : success(false) {}
  bool success :1;
} _TSIService_executeQueryStatement_presult__isset;

class TSIService_executeQueryStatement_presult {
 public:


  virtual ~TSIService_executeQueryStatement_presult() throw();
  TSExecuteStatementResp* success;

  _TSIService_executeQueryStatement_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TSIService_executeUpdateStatement_args__isset {
  _TSIService_executeUpdateStatement_args__isset() : req(false) {}
  bool req :1;
} _TSIService_executeUpdateStatement_args__isset;

class TSIService_executeUpdateStatement_args {
 public:

  TSIService_executeUpdateStatement_args(const TSIService_executeUpdateStatement_args&);
  TSIService_executeUpdateStatement_args& operator=(const TSIService_executeUpdateStatement_args&);
  TSIService_executeUpdateStatement_args() {
  }

  virtual ~TSIService_executeUpdateStatement_args() throw();
  TSExecuteStatementReq req;

  _TSIService_executeUpdateStatement_args__isset __isset;

  void __set_req(const TSExecuteStatementReq& val);

  bool operator == (const TSIService_executeUpdateStatement_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const TSIService_executeUpdateStatement_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TSIService_executeUpdateStatement_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TSIService_executeUpdateStatement_pargs {
 public:


  virtual ~TSIService_executeUpdateStatement_pargs() throw();
  const TSExecuteStatementReq* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TSIService_executeUpdateStatement_result__isset {
  _TSIService_executeUpdateStatement_result__isset() : success(false) {}
  bool success :1;
} _TSIService_executeUpdateStatement_result__isset;

class TSIService_executeUpdateStatement_result {
 public:

  TSIService_executeUpdateStatement_result(const TSIService_executeUpdateStatement_result&);
  TSIService_executeUpdateStatement_result& operator=(const TSIService_executeUpdateStatement_result&);
  TSIService_executeUpdateStatement_result() {
  }

  virtual ~TSIService_executeUpdateStatement_result() throw();
  TSExecuteStatementResp success;

  _TSIService_executeUpdateStatement_result__isset __isset;

  void __set_success(const TSExecuteStatementResp& val);

  bool operator == (const TSIService_executeUpdateStatement_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TSIService_executeUpdateStatement_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TSIService_executeUpdateStatement_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TSIService_executeUpdateStatement_presult__isset {
  _TSIService_executeUpdateStatement_presult__isset() : success(false) {}
  bool success :1;
} _TSIService_executeUpdateStatement_presult__isset;

class TSIService_executeUpdateStatement_presult {
 public:


  virtual ~TSIService_executeUpdateStatement_presult() throw();
  TSExecuteStatementResp* success;

  _TSIService_executeUpdateStatement_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TSIService_fetchResults_args__isset {
  _TSIService_fetchResults_args__isset() : req(false) {}
  bool req :1;
} _TSIService_fetchResults_args__isset;

class TSIService_fetchResults_args {
 public:

  TSIService_fetchResults_args(const TSIService_fetchResults_args&);
  TSIService_fetchResults_args& operator=(const TSIService_fetchResults_args&);
  TSIService_fetchResults_args() {
  }

  virtual ~TSIService_fetchResults_args() throw();
  TSFetchResultsReq req;

  _TSIService_fetchResults_args__isset __isset;

  void __set_req(const TSFetchResultsReq& val);

  bool operator == (const TSIService_fetchResults_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const TSIService_fetchResults_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TSIService_fetchResults_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TSIService_fetchResults_pargs {
 public:


  virtual ~TSIService_fetchResults_pargs() throw();
  const TSFetchResultsReq* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TSIService_fetchResults_result__isset {
  _TSIService_fetchResults_result__isset() : success(false) {}
  bool success :1;
} _TSIService_fetchResults_result__isset;

class TSIService_fetchResults_result {
 public:

  TSIService_fetchResults_result(const TSIService_fetchResults_result&);
  TSIService_fetchResults_result& operator=(const TSIService_fetchResults_result&);
  TSIService_fetchResults_result() {
  }

  virtual ~TSIService_fetchResults_result() throw();
  TSFetchResultsResp success;

  _TSIService_fetchResults_result__isset __isset;

  void __set_success(const TSFetchResultsResp& val);

  bool operator == (const TSIService_fetchResults_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TSIService_fetchResults_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TSIService_fetchResults_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TSIService_fetchResults_presult__isset {
  _TSIService_fetchResults_presult__isset() : success(false) {}
  bool success :1;
} _TSIService_fetchResults_presult__isset;

class TSIService_fetchResults_presult {
 public:


  virtual ~TSIService_fetchResults_presult() throw();
  TSFetchResultsResp* success;

  _TSIService_fetchResults_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TSIService_fetchMetadata_args__isset {
  _TSIService_fetchMetadata_args__isset() : req(false) {}
  bool req :1;
} _TSIService_fetchMetadata_args__isset;

class TSIService_fetchMetadata_args {
 public:

  TSIService_fetchMetadata_args(const TSIService_fetchMetadata_args&);
  TSIService_fetchMetadata_args& operator=(const TSIService_fetchMetadata_args&);
  TSIService_fetchMetadata_args() {
  }

  virtual ~TSIService_fetchMetadata_args() throw();
  TSFetchMetadataReq req;

  _TSIService_fetchMetadata_args__isset __isset;

  void __set_req(const TSFetchMetadataReq& val);

  bool operator == (const TSIService_fetchMetadata_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const TSIService_fetchMetadata_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TSIService_fetchMetadata_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TSIService_fetchMetadata_pargs {
 public:


  virtual ~TSIService_fetchMetadata_pargs() throw();
  const TSFetchMetadataReq* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TSIService_fetchMetadata_result__isset {
  _TSIService_fetchMetadata_result__isset() : success(false) {}
  bool success :1;
} _TSIService_fetchMetadata_result__isset;

class TSIService_fetchMetadata_result {
 public:

  TSIService_fetchMetadata_result(const TSIService_fetchMetadata_result&);
  TSIService_fetchMetadata_result& operator=(const TSIService_fetchMetadata_result&);
  TSIService_fetchMetadata_result() {
  }

  virtual ~TSIService_fetchMetadata_result() throw();
  TSFetchMetadataResp success;

  _TSIService_fetchMetadata_result__isset __isset;

  void __set_success(const TSFetchMetadataResp& val);

  bool operator == (const TSIService_fetchMetadata_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TSIService_fetchMetadata_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TSIService_fetchMetadata_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TSIService_fetchMetadata_presult__isset {
  _TSIService_fetchMetadata_presult__isset() : success(false) {}
  bool success :1;
} _TSIService_fetchMetadata_presult__isset;

class TSIService_fetchMetadata_presult {
 public:


  virtual ~TSIService_fetchMetadata_presult() throw();
  TSFetchMetadataResp* success;

  _TSIService_fetchMetadata_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TSIService_cancelOperation_args__isset {
  _TSIService_cancelOperation_args__isset() : req(false) {}
  bool req :1;
} _TSIService_cancelOperation_args__isset;

class TSIService_cancelOperation_args {
 public:

  TSIService_cancelOperation_args(const TSIService_cancelOperation_args&);
  TSIService_cancelOperation_args& operator=(const TSIService_cancelOperation_args&);
  TSIService_cancelOperation_args() {
  }

  virtual ~TSIService_cancelOperation_args() throw();
  TSCancelOperationReq req;

  _TSIService_cancelOperation_args__isset __isset;

  void __set_req(const TSCancelOperationReq& val);

  bool operator == (const TSIService_cancelOperation_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const TSIService_cancelOperation_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TSIService_cancelOperation_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TSIService_cancelOperation_pargs {
 public:


  virtual ~TSIService_cancelOperation_pargs() throw();
  const TSCancelOperationReq* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TSIService_cancelOperation_result__isset {
  _TSIService_cancelOperation_result__isset() : success(false) {}
  bool success :1;
} _TSIService_cancelOperation_result__isset;

class TSIService_cancelOperation_result {
 public:

  TSIService_cancelOperation_result(const TSIService_cancelOperation_result&);
  TSIService_cancelOperation_result& operator=(const TSIService_cancelOperation_result&);
  TSIService_cancelOperation_result() {
  }

  virtual ~TSIService_cancelOperation_result() throw();
  TSStatus success;

  _TSIService_cancelOperation_result__isset __isset;

  void __set_success(const TSStatus& val);

  bool operator == (const TSIService_cancelOperation_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TSIService_cancelOperation_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TSIService_cancelOperation_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TSIService_cancelOperation_presult__isset {
  _TSIService_cancelOperation_presult__isset() : success(false) {}
  bool success :1;
} _TSIService_cancelOperation_presult__isset;

class TSIService_cancelOperation_presult {
 public:


  virtual ~TSIService_cancelOperation_presult() throw();
  TSStatus* success;

  _TSIService_cancelOperation_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TSIService_closeOperation_args__isset {
  _TSIService_closeOperation_args__isset() : req(false) {}
  bool req :1;
} _TSIService_closeOperation_args__isset;

class TSIService_closeOperation_args {
 public:

  TSIService_closeOperation_args(const TSIService_closeOperation_args&);
  TSIService_closeOperation_args& operator=(const TSIService_closeOperation_args&);
  TSIService_closeOperation_args() {
  }

  virtual ~TSIService_closeOperation_args() throw();
  TSCloseOperationReq req;

  _TSIService_closeOperation_args__isset __isset;

  void __set_req(const TSCloseOperationReq& val);

  bool operator == (const TSIService_closeOperation_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const TSIService_closeOperation_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TSIService_closeOperation_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TSIService_closeOperation_pargs {
 public:


  virtual ~TSIService_closeOperation_pargs() throw();
  const TSCloseOperationReq* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TSIService_closeOperation_result__isset {
  _TSIService_closeOperation_result__isset() : success(false) {}
  bool success :1;
} _TSIService_closeOperation_result__isset;

class TSIService_closeOperation_result {
 public:

  TSIService_closeOperation_result(const TSIService_closeOperation_result&);
  TSIService_closeOperation_result& operator=(const TSIService_closeOperation_result&);
  TSIService_closeOperation_result() {
  }

  virtual ~TSIService_closeOperation_result() throw();
  TSStatus success;

  _TSIService_closeOperation_result__isset __isset;

  void __set_success(const TSStatus& val);

  bool operator == (const TSIService_closeOperation_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TSIService_closeOperation_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TSIService_closeOperation_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TSIService_closeOperation_presult__isset {
  _TSIService_closeOperation_presult__isset() : success(false) {}
  bool success :1;
} _TSIService_closeOperation_presult__isset;

class TSIService_closeOperation_presult {
 public:


  virtual ~TSIService_closeOperation_presult() throw();
  TSStatus* success;

  _TSIService_closeOperation_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class TSIService_getTimeZone_args {
 public:

  TSIService_getTimeZone_args(const TSIService_getTimeZone_args&);
  TSIService_getTimeZone_args& operator=(const TSIService_getTimeZone_args&);
  TSIService_getTimeZone_args() {
  }

  virtual ~TSIService_getTimeZone_args() throw();

  bool operator == (const TSIService_getTimeZone_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TSIService_getTimeZone_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TSIService_getTimeZone_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TSIService_getTimeZone_pargs {
 public:


  virtual ~TSIService_getTimeZone_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TSIService_getTimeZone_result__isset {
  _TSIService_getTimeZone_result__isset() : success(false) {}
  bool success :1;
} _TSIService_getTimeZone_result__isset;

class TSIService_getTimeZone_result {
 public:

  TSIService_getTimeZone_result(const TSIService_getTimeZone_result&);
  TSIService_getTimeZone_result& operator=(const TSIService_getTimeZone_result&);
  TSIService_getTimeZone_result() {
  }

  virtual ~TSIService_getTimeZone_result() throw();
  TSGetTimeZoneResp success;

  _TSIService_getTimeZone_result__isset __isset;

  void __set_success(const TSGetTimeZoneResp& val);

  bool operator == (const TSIService_getTimeZone_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TSIService_getTimeZone_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TSIService_getTimeZone_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TSIService_getTimeZone_presult__isset {
  _TSIService_getTimeZone_presult__isset() : success(false) {}
  bool success :1;
} _TSIService_getTimeZone_presult__isset;

class TSIService_getTimeZone_presult {
 public:


  virtual ~TSIService_getTimeZone_presult() throw();
  TSGetTimeZoneResp* success;

  _TSIService_getTimeZone_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TSIService_setTimeZone_args__isset {
  _TSIService_setTimeZone_args__isset() : req(false) {}
  bool req :1;
} _TSIService_setTimeZone_args__isset;

class TSIService_setTimeZone_args {
 public:

  TSIService_setTimeZone_args(const TSIService_setTimeZone_args&);
  TSIService_setTimeZone_args& operator=(const TSIService_setTimeZone_args&);
  TSIService_setTimeZone_args() {
  }

  virtual ~TSIService_setTimeZone_args() throw();
  TSSetTimeZoneReq req;

  _TSIService_setTimeZone_args__isset __isset;

  void __set_req(const TSSetTimeZoneReq& val);

  bool operator == (const TSIService_setTimeZone_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const TSIService_setTimeZone_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TSIService_setTimeZone_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TSIService_setTimeZone_pargs {
 public:


  virtual ~TSIService_setTimeZone_pargs() throw();
  const TSSetTimeZoneReq* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TSIService_setTimeZone_result__isset {
  _TSIService_setTimeZone_result__isset() : success(false) {}
  bool success :1;
} _TSIService_setTimeZone_result__isset;

class TSIService_setTimeZone_result {
 public:

  TSIService_setTimeZone_result(const TSIService_setTimeZone_result&);
  TSIService_setTimeZone_result& operator=(const TSIService_setTimeZone_result&);
  TSIService_setTimeZone_result() {
  }

  virtual ~TSIService_setTimeZone_result() throw();
  TSStatus success;

  _TSIService_setTimeZone_result__isset __isset;

  void __set_success(const TSStatus& val);

  bool operator == (const TSIService_setTimeZone_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TSIService_setTimeZone_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TSIService_setTimeZone_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TSIService_setTimeZone_presult__isset {
  _TSIService_setTimeZone_presult__isset() : success(false) {}
  bool success :1;
} _TSIService_setTimeZone_presult__isset;

class TSIService_setTimeZone_presult {
 public:


  virtual ~TSIService_setTimeZone_presult() throw();
  TSStatus* success;

  _TSIService_setTimeZone_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class TSIService_getProperties_args {
 public:

  TSIService_getProperties_args(const TSIService_getProperties_args&);
  TSIService_getProperties_args& operator=(const TSIService_getProperties_args&);
  TSIService_getProperties_args() {
  }

  virtual ~TSIService_getProperties_args() throw();

  bool operator == (const TSIService_getProperties_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TSIService_getProperties_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TSIService_getProperties_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TSIService_getProperties_pargs {
 public:


  virtual ~TSIService_getProperties_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TSIService_getProperties_result__isset {
  _TSIService_getProperties_result__isset() : success(false) {}
  bool success :1;
} _TSIService_getProperties_result__isset;

class TSIService_getProperties_result {
 public:

  TSIService_getProperties_result(const TSIService_getProperties_result&);
  TSIService_getProperties_result& operator=(const TSIService_getProperties_result&);
  TSIService_getProperties_result() {
  }

  virtual ~TSIService_getProperties_result() throw();
  ServerProperties success;

  _TSIService_getProperties_result__isset __isset;

  void __set_success(const ServerProperties& val);

  bool operator == (const TSIService_getProperties_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TSIService_getProperties_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TSIService_getProperties_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TSIService_getProperties_presult__isset {
  _TSIService_getProperties_presult__isset() : success(false) {}
  bool success :1;
} _TSIService_getProperties_presult__isset;

class TSIService_getProperties_presult {
 public:


  virtual ~TSIService_getProperties_presult() throw();
  ServerProperties* success;

  _TSIService_getProperties_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TSIService_insert_args__isset {
  _TSIService_insert_args__isset() : req(false) {}
  bool req :1;
} _TSIService_insert_args__isset;

class TSIService_insert_args {
 public:

  TSIService_insert_args(const TSIService_insert_args&);
  TSIService_insert_args& operator=(const TSIService_insert_args&);
  TSIService_insert_args() {
  }

  virtual ~TSIService_insert_args() throw();
  TSInsertionReq req;

  _TSIService_insert_args__isset __isset;

  void __set_req(const TSInsertionReq& val);

  bool operator == (const TSIService_insert_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const TSIService_insert_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TSIService_insert_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TSIService_insert_pargs {
 public:


  virtual ~TSIService_insert_pargs() throw();
  const TSInsertionReq* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TSIService_insert_result__isset {
  _TSIService_insert_result__isset() : success(false) {}
  bool success :1;
} _TSIService_insert_result__isset;

class TSIService_insert_result {
 public:

  TSIService_insert_result(const TSIService_insert_result&);
  TSIService_insert_result& operator=(const TSIService_insert_result&);
  TSIService_insert_result() {
  }

  virtual ~TSIService_insert_result() throw();
  TSExecuteStatementResp success;

  _TSIService_insert_result__isset __isset;

  void __set_success(const TSExecuteStatementResp& val);

  bool operator == (const TSIService_insert_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TSIService_insert_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TSIService_insert_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TSIService_insert_presult__isset {
  _TSIService_insert_presult__isset() : success(false) {}
  bool success :1;
} _TSIService_insert_presult__isset;

class TSIService_insert_presult {
 public:


  virtual ~TSIService_insert_presult() throw();
  TSExecuteStatementResp* success;

  _TSIService_insert_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TSIService_insertBatch_args__isset {
  _TSIService_insertBatch_args__isset() : req(false) {}
  bool req :1;
} _TSIService_insertBatch_args__isset;

class TSIService_insertBatch_args {
 public:

  TSIService_insertBatch_args(const TSIService_insertBatch_args&);
  TSIService_insertBatch_args& operator=(const TSIService_insertBatch_args&);
  TSIService_insertBatch_args() {
  }

  virtual ~TSIService_insertBatch_args() throw();
  TSBatchInsertionReq req;

  _TSIService_insertBatch_args__isset __isset;

  void __set_req(const TSBatchInsertionReq& val);

  bool operator == (const TSIService_insertBatch_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const TSIService_insertBatch_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TSIService_insertBatch_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TSIService_insertBatch_pargs {
 public:


  virtual ~TSIService_insertBatch_pargs() throw();
  const TSBatchInsertionReq* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TSIService_insertBatch_result__isset {
  _TSIService_insertBatch_result__isset() : success(false) {}
  bool success :1;
} _TSIService_insertBatch_result__isset;

class TSIService_insertBatch_result {
 public:

  TSIService_insertBatch_result(const TSIService_insertBatch_result&);
  TSIService_insertBatch_result& operator=(const TSIService_insertBatch_result&);
  TSIService_insertBatch_result() {
  }

  virtual ~TSIService_insertBatch_result() throw();
  TSExecuteBatchStatementResp success;

  _TSIService_insertBatch_result__isset __isset;

  void __set_success(const TSExecuteBatchStatementResp& val);

  bool operator == (const TSIService_insertBatch_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TSIService_insertBatch_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TSIService_insertBatch_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TSIService_insertBatch_presult__isset {
  _TSIService_insertBatch_presult__isset() : success(false) {}
  bool success :1;
} _TSIService_insertBatch_presult__isset;

class TSIService_insertBatch_presult {
 public:


  virtual ~TSIService_insertBatch_presult() throw();
  TSExecuteBatchStatementResp* success;

  _TSIService_insertBatch_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TSIService_setStorageGroup_args__isset {
  _TSIService_setStorageGroup_args__isset() : storageGroup(false) {}
  bool storageGroup :1;
} _TSIService_setStorageGroup_args__isset;

class TSIService_setStorageGroup_args {
 public:

  TSIService_setStorageGroup_args(const TSIService_setStorageGroup_args&);
  TSIService_setStorageGroup_args& operator=(const TSIService_setStorageGroup_args&);
  TSIService_setStorageGroup_args() : storageGroup() {
  }

  virtual ~TSIService_setStorageGroup_args() throw();
  std::string storageGroup;

  _TSIService_setStorageGroup_args__isset __isset;

  void __set_storageGroup(const std::string& val);

  bool operator == (const TSIService_setStorageGroup_args & rhs) const
  {
    if (!(storageGroup == rhs.storageGroup))
      return false;
    return true;
  }
  bool operator != (const TSIService_setStorageGroup_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TSIService_setStorageGroup_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TSIService_setStorageGroup_pargs {
 public:


  virtual ~TSIService_setStorageGroup_pargs() throw();
  const std::string* storageGroup;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TSIService_setStorageGroup_result__isset {
  _TSIService_setStorageGroup_result__isset() : success(false) {}
  bool success :1;
} _TSIService_setStorageGroup_result__isset;

class TSIService_setStorageGroup_result {
 public:

  TSIService_setStorageGroup_result(const TSIService_setStorageGroup_result&);
  TSIService_setStorageGroup_result& operator=(const TSIService_setStorageGroup_result&);
  TSIService_setStorageGroup_result() {
  }

  virtual ~TSIService_setStorageGroup_result() throw();
  TSStatus success;

  _TSIService_setStorageGroup_result__isset __isset;

  void __set_success(const TSStatus& val);

  bool operator == (const TSIService_setStorageGroup_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TSIService_setStorageGroup_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TSIService_setStorageGroup_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TSIService_setStorageGroup_presult__isset {
  _TSIService_setStorageGroup_presult__isset() : success(false) {}
  bool success :1;
} _TSIService_setStorageGroup_presult__isset;

class TSIService_setStorageGroup_presult {
 public:


  virtual ~TSIService_setStorageGroup_presult() throw();
  TSStatus* success;

  _TSIService_setStorageGroup_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TSIService_createTimeseries_args__isset {
  _TSIService_createTimeseries_args__isset() : req(false) {}
  bool req :1;
} _TSIService_createTimeseries_args__isset;

class TSIService_createTimeseries_args {
 public:

  TSIService_createTimeseries_args(const TSIService_createTimeseries_args&);
  TSIService_createTimeseries_args& operator=(const TSIService_createTimeseries_args&);
  TSIService_createTimeseries_args() {
  }

  virtual ~TSIService_createTimeseries_args() throw();
  TSCreateTimeseriesReq req;

  _TSIService_createTimeseries_args__isset __isset;

  void __set_req(const TSCreateTimeseriesReq& val);

  bool operator == (const TSIService_createTimeseries_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const TSIService_createTimeseries_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TSIService_createTimeseries_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TSIService_createTimeseries_pargs {
 public:


  virtual ~TSIService_createTimeseries_pargs() throw();
  const TSCreateTimeseriesReq* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TSIService_createTimeseries_result__isset {
  _TSIService_createTimeseries_result__isset() : success(false) {}
  bool success :1;
} _TSIService_createTimeseries_result__isset;

class TSIService_createTimeseries_result {
 public:

  TSIService_createTimeseries_result(const TSIService_createTimeseries_result&);
  TSIService_createTimeseries_result& operator=(const TSIService_createTimeseries_result&);
  TSIService_createTimeseries_result() {
  }

  virtual ~TSIService_createTimeseries_result() throw();
  TSStatus success;

  _TSIService_createTimeseries_result__isset __isset;

  void __set_success(const TSStatus& val);

  bool operator == (const TSIService_createTimeseries_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TSIService_createTimeseries_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TSIService_createTimeseries_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TSIService_createTimeseries_presult__isset {
  _TSIService_createTimeseries_presult__isset() : success(false) {}
  bool success :1;
} _TSIService_createTimeseries_presult__isset;

class TSIService_createTimeseries_presult {
 public:


  virtual ~TSIService_createTimeseries_presult() throw();
  TSStatus* success;

  _TSIService_createTimeseries_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TSIService_deleteTimeseries_args__isset {
  _TSIService_deleteTimeseries_args__isset() : path(false) {}
  bool path :1;
} _TSIService_deleteTimeseries_args__isset;

class TSIService_deleteTimeseries_args {
 public:

  TSIService_deleteTimeseries_args(const TSIService_deleteTimeseries_args&);
  TSIService_deleteTimeseries_args& operator=(const TSIService_deleteTimeseries_args&);
  TSIService_deleteTimeseries_args() {
  }

  virtual ~TSIService_deleteTimeseries_args() throw();
  std::vector<std::string>  path;

  _TSIService_deleteTimeseries_args__isset __isset;

  void __set_path(const std::vector<std::string> & val);

  bool operator == (const TSIService_deleteTimeseries_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    return true;
  }
  bool operator != (const TSIService_deleteTimeseries_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TSIService_deleteTimeseries_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TSIService_deleteTimeseries_pargs {
 public:


  virtual ~TSIService_deleteTimeseries_pargs() throw();
  const std::vector<std::string> * path;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TSIService_deleteTimeseries_result__isset {
  _TSIService_deleteTimeseries_result__isset() : success(false) {}
  bool success :1;
} _TSIService_deleteTimeseries_result__isset;

class TSIService_deleteTimeseries_result {
 public:

  TSIService_deleteTimeseries_result(const TSIService_deleteTimeseries_result&);
  TSIService_deleteTimeseries_result& operator=(const TSIService_deleteTimeseries_result&);
  TSIService_deleteTimeseries_result() {
  }

  virtual ~TSIService_deleteTimeseries_result() throw();
  TSStatus success;

  _TSIService_deleteTimeseries_result__isset __isset;

  void __set_success(const TSStatus& val);

  bool operator == (const TSIService_deleteTimeseries_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TSIService_deleteTimeseries_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TSIService_deleteTimeseries_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TSIService_deleteTimeseries_presult__isset {
  _TSIService_deleteTimeseries_presult__isset() : success(false) {}
  bool success :1;
} _TSIService_deleteTimeseries_presult__isset;

class TSIService_deleteTimeseries_presult {
 public:


  virtual ~TSIService_deleteTimeseries_presult() throw();
  TSStatus* success;

  _TSIService_deleteTimeseries_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TSIService_insertRow_args__isset {
  _TSIService_insertRow_args__isset() : req(false) {}
  bool req :1;
} _TSIService_insertRow_args__isset;

class TSIService_insertRow_args {
 public:

  TSIService_insertRow_args(const TSIService_insertRow_args&);
  TSIService_insertRow_args& operator=(const TSIService_insertRow_args&);
  TSIService_insertRow_args() {
  }

  virtual ~TSIService_insertRow_args() throw();
  TSInsertReq req;

  _TSIService_insertRow_args__isset __isset;

  void __set_req(const TSInsertReq& val);

  bool operator == (const TSIService_insertRow_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const TSIService_insertRow_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TSIService_insertRow_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TSIService_insertRow_pargs {
 public:


  virtual ~TSIService_insertRow_pargs() throw();
  const TSInsertReq* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TSIService_insertRow_result__isset {
  _TSIService_insertRow_result__isset() : success(false) {}
  bool success :1;
} _TSIService_insertRow_result__isset;

class TSIService_insertRow_result {
 public:

  TSIService_insertRow_result(const TSIService_insertRow_result&);
  TSIService_insertRow_result& operator=(const TSIService_insertRow_result&);
  TSIService_insertRow_result() {
  }

  virtual ~TSIService_insertRow_result() throw();
  TSStatus success;

  _TSIService_insertRow_result__isset __isset;

  void __set_success(const TSStatus& val);

  bool operator == (const TSIService_insertRow_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TSIService_insertRow_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TSIService_insertRow_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TSIService_insertRow_presult__isset {
  _TSIService_insertRow_presult__isset() : success(false) {}
  bool success :1;
} _TSIService_insertRow_presult__isset;

class TSIService_insertRow_presult {
 public:


  virtual ~TSIService_insertRow_presult() throw();
  TSStatus* success;

  _TSIService_insertRow_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TSIService_deleteData_args__isset {
  _TSIService_deleteData_args__isset() : req(false) {}
  bool req :1;
} _TSIService_deleteData_args__isset;

class TSIService_deleteData_args {
 public:

  TSIService_deleteData_args(const TSIService_deleteData_args&);
  TSIService_deleteData_args& operator=(const TSIService_deleteData_args&);
  TSIService_deleteData_args() {
  }

  virtual ~TSIService_deleteData_args() throw();
  TSDeleteDataReq req;

  _TSIService_deleteData_args__isset __isset;

  void __set_req(const TSDeleteDataReq& val);

  bool operator == (const TSIService_deleteData_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const TSIService_deleteData_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TSIService_deleteData_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TSIService_deleteData_pargs {
 public:


  virtual ~TSIService_deleteData_pargs() throw();
  const TSDeleteDataReq* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TSIService_deleteData_result__isset {
  _TSIService_deleteData_result__isset() : success(false) {}
  bool success :1;
} _TSIService_deleteData_result__isset;

class TSIService_deleteData_result {
 public:

  TSIService_deleteData_result(const TSIService_deleteData_result&);
  TSIService_deleteData_result& operator=(const TSIService_deleteData_result&);
  TSIService_deleteData_result() {
  }

  virtual ~TSIService_deleteData_result() throw();
  TSStatus success;

  _TSIService_deleteData_result__isset __isset;

  void __set_success(const TSStatus& val);

  bool operator == (const TSIService_deleteData_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TSIService_deleteData_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TSIService_deleteData_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TSIService_deleteData_presult__isset {
  _TSIService_deleteData_presult__isset() : success(false) {}
  bool success :1;
} _TSIService_deleteData_presult__isset;

class TSIService_deleteData_presult {
 public:


  virtual ~TSIService_deleteData_presult() throw();
  TSStatus* success;

  _TSIService_deleteData_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class TSIService_requestStatementId_args {
 public:

  TSIService_requestStatementId_args(const TSIService_requestStatementId_args&);
  TSIService_requestStatementId_args& operator=(const TSIService_requestStatementId_args&);
  TSIService_requestStatementId_args() {
  }

  virtual ~TSIService_requestStatementId_args() throw();

  bool operator == (const TSIService_requestStatementId_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TSIService_requestStatementId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TSIService_requestStatementId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TSIService_requestStatementId_pargs {
 public:


  virtual ~TSIService_requestStatementId_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TSIService_requestStatementId_result__isset {
  _TSIService_requestStatementId_result__isset() : success(false) {}
  bool success :1;
} _TSIService_requestStatementId_result__isset;

class TSIService_requestStatementId_result {
 public:

  TSIService_requestStatementId_result(const TSIService_requestStatementId_result&);
  TSIService_requestStatementId_result& operator=(const TSIService_requestStatementId_result&);
  TSIService_requestStatementId_result() : success(0) {
  }

  virtual ~TSIService_requestStatementId_result() throw();
  int64_t success;

  _TSIService_requestStatementId_result__isset __isset;

  void __set_success(const int64_t val);

  bool operator == (const TSIService_requestStatementId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TSIService_requestStatementId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TSIService_requestStatementId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TSIService_requestStatementId_presult__isset {
  _TSIService_requestStatementId_presult__isset() : success(false) {}
  bool success :1;
} _TSIService_requestStatementId_presult__isset;

class TSIService_requestStatementId_presult {
 public:


  virtual ~TSIService_requestStatementId_presult() throw();
  int64_t* success;

  _TSIService_requestStatementId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class TSIServiceClient : virtual public TSIServiceIf {
 public:
  TSIServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  TSIServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void openSession(TSOpenSessionResp& _return, const TSOpenSessionReq& req);
  void send_openSession(const TSOpenSessionReq& req);
  void recv_openSession(TSOpenSessionResp& _return);
  void closeSession(TSStatus& _return, const TSCloseSessionReq& req);
  void send_closeSession(const TSCloseSessionReq& req);
  void recv_closeSession(TSStatus& _return);
  void executeStatement(TSExecuteStatementResp& _return, const TSExecuteStatementReq& req);
  void send_executeStatement(const TSExecuteStatementReq& req);
  void recv_executeStatement(TSExecuteStatementResp& _return);
  void executeBatchStatement(TSExecuteBatchStatementResp& _return, const TSExecuteBatchStatementReq& req);
  void send_executeBatchStatement(const TSExecuteBatchStatementReq& req);
  void recv_executeBatchStatement(TSExecuteBatchStatementResp& _return);
  void executeQueryStatement(TSExecuteStatementResp& _return, const TSExecuteStatementReq& req);
  void send_executeQueryStatement(const TSExecuteStatementReq& req);
  void recv_executeQueryStatement(TSExecuteStatementResp& _return);
  void executeUpdateStatement(TSExecuteStatementResp& _return, const TSExecuteStatementReq& req);
  void send_executeUpdateStatement(const TSExecuteStatementReq& req);
  void recv_executeUpdateStatement(TSExecuteStatementResp& _return);
  void fetchResults(TSFetchResultsResp& _return, const TSFetchResultsReq& req);
  void send_fetchResults(const TSFetchResultsReq& req);
  void recv_fetchResults(TSFetchResultsResp& _return);
  void fetchMetadata(TSFetchMetadataResp& _return, const TSFetchMetadataReq& req);
  void send_fetchMetadata(const TSFetchMetadataReq& req);
  void recv_fetchMetadata(TSFetchMetadataResp& _return);
  void cancelOperation(TSStatus& _return, const TSCancelOperationReq& req);
  void send_cancelOperation(const TSCancelOperationReq& req);
  void recv_cancelOperation(TSStatus& _return);
  void closeOperation(TSStatus& _return, const TSCloseOperationReq& req);
  void send_closeOperation(const TSCloseOperationReq& req);
  void recv_closeOperation(TSStatus& _return);
  void getTimeZone(TSGetTimeZoneResp& _return);
  void send_getTimeZone();
  void recv_getTimeZone(TSGetTimeZoneResp& _return);
  void setTimeZone(TSStatus& _return, const TSSetTimeZoneReq& req);
  void send_setTimeZone(const TSSetTimeZoneReq& req);
  void recv_setTimeZone(TSStatus& _return);
  void getProperties(ServerProperties& _return);
  void send_getProperties();
  void recv_getProperties(ServerProperties& _return);
  void insert(TSExecuteStatementResp& _return, const TSInsertionReq& req);
  void send_insert(const TSInsertionReq& req);
  void recv_insert(TSExecuteStatementResp& _return);
  void insertBatch(TSExecuteBatchStatementResp& _return, const TSBatchInsertionReq& req);
  void send_insertBatch(const TSBatchInsertionReq& req);
  void recv_insertBatch(TSExecuteBatchStatementResp& _return);
  void setStorageGroup(TSStatus& _return, const std::string& storageGroup);
  void send_setStorageGroup(const std::string& storageGroup);
  void recv_setStorageGroup(TSStatus& _return);
  void createTimeseries(TSStatus& _return, const TSCreateTimeseriesReq& req);
  void send_createTimeseries(const TSCreateTimeseriesReq& req);
  void recv_createTimeseries(TSStatus& _return);
  void deleteTimeseries(TSStatus& _return, const std::vector<std::string> & path);
  void send_deleteTimeseries(const std::vector<std::string> & path);
  void recv_deleteTimeseries(TSStatus& _return);
  void insertRow(TSStatus& _return, const TSInsertReq& req);
  void send_insertRow(const TSInsertReq& req);
  void recv_insertRow(TSStatus& _return);
  void deleteData(TSStatus& _return, const TSDeleteDataReq& req);
  void send_deleteData(const TSDeleteDataReq& req);
  void recv_deleteData(TSStatus& _return);
  int64_t requestStatementId();
  void send_requestStatementId();
  int64_t recv_requestStatementId();
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class TSIServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<TSIServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (TSIServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_openSession(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_closeSession(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_executeStatement(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_executeBatchStatement(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_executeQueryStatement(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_executeUpdateStatement(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchResults(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchMetadata(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_cancelOperation(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_closeOperation(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getTimeZone(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setTimeZone(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getProperties(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_insert(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_insertBatch(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setStorageGroup(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_createTimeseries(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteTimeseries(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_insertRow(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteData(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_requestStatementId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  TSIServiceProcessor(::apache::thrift::stdcxx::shared_ptr<TSIServiceIf> iface) :
    iface_(iface) {
    processMap_["openSession"] = &TSIServiceProcessor::process_openSession;
    processMap_["closeSession"] = &TSIServiceProcessor::process_closeSession;
    processMap_["executeStatement"] = &TSIServiceProcessor::process_executeStatement;
    processMap_["executeBatchStatement"] = &TSIServiceProcessor::process_executeBatchStatement;
    processMap_["executeQueryStatement"] = &TSIServiceProcessor::process_executeQueryStatement;
    processMap_["executeUpdateStatement"] = &TSIServiceProcessor::process_executeUpdateStatement;
    processMap_["fetchResults"] = &TSIServiceProcessor::process_fetchResults;
    processMap_["fetchMetadata"] = &TSIServiceProcessor::process_fetchMetadata;
    processMap_["cancelOperation"] = &TSIServiceProcessor::process_cancelOperation;
    processMap_["closeOperation"] = &TSIServiceProcessor::process_closeOperation;
    processMap_["getTimeZone"] = &TSIServiceProcessor::process_getTimeZone;
    processMap_["setTimeZone"] = &TSIServiceProcessor::process_setTimeZone;
    processMap_["getProperties"] = &TSIServiceProcessor::process_getProperties;
    processMap_["insert"] = &TSIServiceProcessor::process_insert;
    processMap_["insertBatch"] = &TSIServiceProcessor::process_insertBatch;
    processMap_["setStorageGroup"] = &TSIServiceProcessor::process_setStorageGroup;
    processMap_["createTimeseries"] = &TSIServiceProcessor::process_createTimeseries;
    processMap_["deleteTimeseries"] = &TSIServiceProcessor::process_deleteTimeseries;
    processMap_["insertRow"] = &TSIServiceProcessor::process_insertRow;
    processMap_["deleteData"] = &TSIServiceProcessor::process_deleteData;
    processMap_["requestStatementId"] = &TSIServiceProcessor::process_requestStatementId;
  }

  virtual ~TSIServiceProcessor() {}
};

class TSIServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  TSIServiceProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< TSIServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< TSIServiceIfFactory > handlerFactory_;
};

class TSIServiceMultiface : virtual public TSIServiceIf {
 public:
  TSIServiceMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<TSIServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~TSIServiceMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<TSIServiceIf> > ifaces_;
  TSIServiceMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<TSIServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void openSession(TSOpenSessionResp& _return, const TSOpenSessionReq& req) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->openSession(_return, req);
    }
    ifaces_[i]->openSession(_return, req);
    return;
  }

  void closeSession(TSStatus& _return, const TSCloseSessionReq& req) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->closeSession(_return, req);
    }
    ifaces_[i]->closeSession(_return, req);
    return;
  }

  void executeStatement(TSExecuteStatementResp& _return, const TSExecuteStatementReq& req) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->executeStatement(_return, req);
    }
    ifaces_[i]->executeStatement(_return, req);
    return;
  }

  void executeBatchStatement(TSExecuteBatchStatementResp& _return, const TSExecuteBatchStatementReq& req) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->executeBatchStatement(_return, req);
    }
    ifaces_[i]->executeBatchStatement(_return, req);
    return;
  }

  void executeQueryStatement(TSExecuteStatementResp& _return, const TSExecuteStatementReq& req) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->executeQueryStatement(_return, req);
    }
    ifaces_[i]->executeQueryStatement(_return, req);
    return;
  }

  void executeUpdateStatement(TSExecuteStatementResp& _return, const TSExecuteStatementReq& req) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->executeUpdateStatement(_return, req);
    }
    ifaces_[i]->executeUpdateStatement(_return, req);
    return;
  }

  void fetchResults(TSFetchResultsResp& _return, const TSFetchResultsReq& req) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchResults(_return, req);
    }
    ifaces_[i]->fetchResults(_return, req);
    return;
  }

  void fetchMetadata(TSFetchMetadataResp& _return, const TSFetchMetadataReq& req) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchMetadata(_return, req);
    }
    ifaces_[i]->fetchMetadata(_return, req);
    return;
  }

  void cancelOperation(TSStatus& _return, const TSCancelOperationReq& req) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->cancelOperation(_return, req);
    }
    ifaces_[i]->cancelOperation(_return, req);
    return;
  }

  void closeOperation(TSStatus& _return, const TSCloseOperationReq& req) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->closeOperation(_return, req);
    }
    ifaces_[i]->closeOperation(_return, req);
    return;
  }

  void getTimeZone(TSGetTimeZoneResp& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getTimeZone(_return);
    }
    ifaces_[i]->getTimeZone(_return);
    return;
  }

  void setTimeZone(TSStatus& _return, const TSSetTimeZoneReq& req) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setTimeZone(_return, req);
    }
    ifaces_[i]->setTimeZone(_return, req);
    return;
  }

  void getProperties(ServerProperties& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getProperties(_return);
    }
    ifaces_[i]->getProperties(_return);
    return;
  }

  void insert(TSExecuteStatementResp& _return, const TSInsertionReq& req) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->insert(_return, req);
    }
    ifaces_[i]->insert(_return, req);
    return;
  }

  void insertBatch(TSExecuteBatchStatementResp& _return, const TSBatchInsertionReq& req) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->insertBatch(_return, req);
    }
    ifaces_[i]->insertBatch(_return, req);
    return;
  }

  void setStorageGroup(TSStatus& _return, const std::string& storageGroup) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setStorageGroup(_return, storageGroup);
    }
    ifaces_[i]->setStorageGroup(_return, storageGroup);
    return;
  }

  void createTimeseries(TSStatus& _return, const TSCreateTimeseriesReq& req) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->createTimeseries(_return, req);
    }
    ifaces_[i]->createTimeseries(_return, req);
    return;
  }

  void deleteTimeseries(TSStatus& _return, const std::vector<std::string> & path) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteTimeseries(_return, path);
    }
    ifaces_[i]->deleteTimeseries(_return, path);
    return;
  }

  void insertRow(TSStatus& _return, const TSInsertReq& req) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->insertRow(_return, req);
    }
    ifaces_[i]->insertRow(_return, req);
    return;
  }

  void deleteData(TSStatus& _return, const TSDeleteDataReq& req) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteData(_return, req);
    }
    ifaces_[i]->deleteData(_return, req);
    return;
  }

  int64_t requestStatementId() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->requestStatementId();
    }
    return ifaces_[i]->requestStatementId();
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class TSIServiceConcurrentClient : virtual public TSIServiceIf {
 public:
  TSIServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  TSIServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void openSession(TSOpenSessionResp& _return, const TSOpenSessionReq& req);
  int32_t send_openSession(const TSOpenSessionReq& req);
  void recv_openSession(TSOpenSessionResp& _return, const int32_t seqid);
  void closeSession(TSStatus& _return, const TSCloseSessionReq& req);
  int32_t send_closeSession(const TSCloseSessionReq& req);
  void recv_closeSession(TSStatus& _return, const int32_t seqid);
  void executeStatement(TSExecuteStatementResp& _return, const TSExecuteStatementReq& req);
  int32_t send_executeStatement(const TSExecuteStatementReq& req);
  void recv_executeStatement(TSExecuteStatementResp& _return, const int32_t seqid);
  void executeBatchStatement(TSExecuteBatchStatementResp& _return, const TSExecuteBatchStatementReq& req);
  int32_t send_executeBatchStatement(const TSExecuteBatchStatementReq& req);
  void recv_executeBatchStatement(TSExecuteBatchStatementResp& _return, const int32_t seqid);
  void executeQueryStatement(TSExecuteStatementResp& _return, const TSExecuteStatementReq& req);
  int32_t send_executeQueryStatement(const TSExecuteStatementReq& req);
  void recv_executeQueryStatement(TSExecuteStatementResp& _return, const int32_t seqid);
  void executeUpdateStatement(TSExecuteStatementResp& _return, const TSExecuteStatementReq& req);
  int32_t send_executeUpdateStatement(const TSExecuteStatementReq& req);
  void recv_executeUpdateStatement(TSExecuteStatementResp& _return, const int32_t seqid);
  void fetchResults(TSFetchResultsResp& _return, const TSFetchResultsReq& req);
  int32_t send_fetchResults(const TSFetchResultsReq& req);
  void recv_fetchResults(TSFetchResultsResp& _return, const int32_t seqid);
  void fetchMetadata(TSFetchMetadataResp& _return, const TSFetchMetadataReq& req);
  int32_t send_fetchMetadata(const TSFetchMetadataReq& req);
  void recv_fetchMetadata(TSFetchMetadataResp& _return, const int32_t seqid);
  void cancelOperation(TSStatus& _return, const TSCancelOperationReq& req);
  int32_t send_cancelOperation(const TSCancelOperationReq& req);
  void recv_cancelOperation(TSStatus& _return, const int32_t seqid);
  void closeOperation(TSStatus& _return, const TSCloseOperationReq& req);
  int32_t send_closeOperation(const TSCloseOperationReq& req);
  void recv_closeOperation(TSStatus& _return, const int32_t seqid);
  void getTimeZone(TSGetTimeZoneResp& _return);
  int32_t send_getTimeZone();
  void recv_getTimeZone(TSGetTimeZoneResp& _return, const int32_t seqid);
  void setTimeZone(TSStatus& _return, const TSSetTimeZoneReq& req);
  int32_t send_setTimeZone(const TSSetTimeZoneReq& req);
  void recv_setTimeZone(TSStatus& _return, const int32_t seqid);
  void getProperties(ServerProperties& _return);
  int32_t send_getProperties();
  void recv_getProperties(ServerProperties& _return, const int32_t seqid);
  void insert(TSExecuteStatementResp& _return, const TSInsertionReq& req);
  int32_t send_insert(const TSInsertionReq& req);
  void recv_insert(TSExecuteStatementResp& _return, const int32_t seqid);
  void insertBatch(TSExecuteBatchStatementResp& _return, const TSBatchInsertionReq& req);
  int32_t send_insertBatch(const TSBatchInsertionReq& req);
  void recv_insertBatch(TSExecuteBatchStatementResp& _return, const int32_t seqid);
  void setStorageGroup(TSStatus& _return, const std::string& storageGroup);
  int32_t send_setStorageGroup(const std::string& storageGroup);
  void recv_setStorageGroup(TSStatus& _return, const int32_t seqid);
  void createTimeseries(TSStatus& _return, const TSCreateTimeseriesReq& req);
  int32_t send_createTimeseries(const TSCreateTimeseriesReq& req);
  void recv_createTimeseries(TSStatus& _return, const int32_t seqid);
  void deleteTimeseries(TSStatus& _return, const std::vector<std::string> & path);
  int32_t send_deleteTimeseries(const std::vector<std::string> & path);
  void recv_deleteTimeseries(TSStatus& _return, const int32_t seqid);
  void insertRow(TSStatus& _return, const TSInsertReq& req);
  int32_t send_insertRow(const TSInsertReq& req);
  void recv_insertRow(TSStatus& _return, const int32_t seqid);
  void deleteData(TSStatus& _return, const TSDeleteDataReq& req);
  int32_t send_deleteData(const TSDeleteDataReq& req);
  void recv_deleteData(TSStatus& _return, const int32_t seqid);
  int64_t requestStatementId();
  int32_t send_requestStatementId();
  int64_t recv_requestStatementId(const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif
