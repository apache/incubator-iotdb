/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef rpc_TYPES_H
#define rpc_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>




struct TSProtocolVersion {
  enum type {
    IOTDB_SERVICE_PROTOCOL_V1 = 0
  };
};

extern const std::map<int, const char*> _TSProtocolVersion_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TSProtocolVersion::type& val);

class TSStatusType;

class TSStatus;

class TSHandleIdentifier;

class TSOperationHandle;

class TSExecuteStatementResp;

class TS_SessionHandle;

class TSOpenSessionResp;

class TSOpenSessionReq;

class TSCloseSessionReq;

class TSExecuteStatementReq;

class TSExecuteBatchStatementResp;

class TSExecuteBatchStatementReq;

class TSGetOperationStatusReq;

class TSCancelOperationReq;

class TSCloseOperationReq;

class TSDataValue;

class TSRowRecord;

class TSQueryDataSet;

class TSFetchResultsReq;

class TSFetchResultsResp;

class TSFetchMetadataResp;

class TSFetchMetadataReq;

class TSColumnSchema;

class TSGetTimeZoneResp;

class TSSetTimeZoneReq;

class TSInsertionReq;

class TSBatchInsertionReq;

class TSInsertReq;

class TSDeleteDataReq;

class TSCreateTimeseriesReq;

class ServerProperties;


class TSStatusType : public virtual ::apache::thrift::TBase {
 public:

  TSStatusType(const TSStatusType&);
  TSStatusType& operator=(const TSStatusType&);
  TSStatusType() : code(0), message() {
  }

  virtual ~TSStatusType() throw();
  int32_t code;
  std::string message;

  void __set_code(const int32_t val);

  void __set_message(const std::string& val);

  bool operator == (const TSStatusType & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const TSStatusType &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TSStatusType & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TSStatusType &a, TSStatusType &b);

std::ostream& operator<<(std::ostream& out, const TSStatusType& obj);

typedef struct _TSStatus__isset {
  _TSStatus__isset() : infoMessages(false), sqlState(false) {}
  bool infoMessages :1;
  bool sqlState :1;
} _TSStatus__isset;

class TSStatus : public virtual ::apache::thrift::TBase {
 public:

  TSStatus(const TSStatus&);
  TSStatus& operator=(const TSStatus&);
  TSStatus() : sqlState() {
  }

  virtual ~TSStatus() throw();
  TSStatusType statusType;
  std::vector<std::string>  infoMessages;
  std::string sqlState;

  _TSStatus__isset __isset;

  void __set_statusType(const TSStatusType& val);

  void __set_infoMessages(const std::vector<std::string> & val);

  void __set_sqlState(const std::string& val);

  bool operator == (const TSStatus & rhs) const
  {
    if (!(statusType == rhs.statusType))
      return false;
    if (__isset.infoMessages != rhs.__isset.infoMessages)
      return false;
    else if (__isset.infoMessages && !(infoMessages == rhs.infoMessages))
      return false;
    if (__isset.sqlState != rhs.__isset.sqlState)
      return false;
    else if (__isset.sqlState && !(sqlState == rhs.sqlState))
      return false;
    return true;
  }
  bool operator != (const TSStatus &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TSStatus & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TSStatus &a, TSStatus &b);

std::ostream& operator<<(std::ostream& out, const TSStatus& obj);


class TSHandleIdentifier : public virtual ::apache::thrift::TBase {
 public:

  TSHandleIdentifier(const TSHandleIdentifier&);
  TSHandleIdentifier& operator=(const TSHandleIdentifier&);
  TSHandleIdentifier() : guid(), secret() {
  }

  virtual ~TSHandleIdentifier() throw();
  std::string guid;
  std::string secret;

  void __set_guid(const std::string& val);

  void __set_secret(const std::string& val);

  bool operator == (const TSHandleIdentifier & rhs) const
  {
    if (!(guid == rhs.guid))
      return false;
    if (!(secret == rhs.secret))
      return false;
    return true;
  }
  bool operator != (const TSHandleIdentifier &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TSHandleIdentifier & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TSHandleIdentifier &a, TSHandleIdentifier &b);

std::ostream& operator<<(std::ostream& out, const TSHandleIdentifier& obj);


class TSOperationHandle : public virtual ::apache::thrift::TBase {
 public:

  TSOperationHandle(const TSOperationHandle&);
  TSOperationHandle& operator=(const TSOperationHandle&);
  TSOperationHandle() : hasResultSet(0) {
  }

  virtual ~TSOperationHandle() throw();
  TSHandleIdentifier operationId;
  bool hasResultSet;

  void __set_operationId(const TSHandleIdentifier& val);

  void __set_hasResultSet(const bool val);

  bool operator == (const TSOperationHandle & rhs) const
  {
    if (!(operationId == rhs.operationId))
      return false;
    if (!(hasResultSet == rhs.hasResultSet))
      return false;
    return true;
  }
  bool operator != (const TSOperationHandle &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TSOperationHandle & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TSOperationHandle &a, TSOperationHandle &b);

std::ostream& operator<<(std::ostream& out, const TSOperationHandle& obj);

typedef struct _TSExecuteStatementResp__isset {
  _TSExecuteStatementResp__isset() : operationHandle(false), columns(false), operationType(false), ignoreTimeStamp(false), dataTypeList(false) {}
  bool operationHandle :1;
  bool columns :1;
  bool operationType :1;
  bool ignoreTimeStamp :1;
  bool dataTypeList :1;
} _TSExecuteStatementResp__isset;

class TSExecuteStatementResp : public virtual ::apache::thrift::TBase {
 public:

  TSExecuteStatementResp(const TSExecuteStatementResp&);
  TSExecuteStatementResp& operator=(const TSExecuteStatementResp&);
  TSExecuteStatementResp() : operationType(), ignoreTimeStamp(0) {
  }

  virtual ~TSExecuteStatementResp() throw();
  TSStatus status;
  TSOperationHandle operationHandle;
  std::vector<std::string>  columns;
  std::string operationType;
  bool ignoreTimeStamp;
  std::vector<std::string>  dataTypeList;

  _TSExecuteStatementResp__isset __isset;

  void __set_status(const TSStatus& val);

  void __set_operationHandle(const TSOperationHandle& val);

  void __set_columns(const std::vector<std::string> & val);

  void __set_operationType(const std::string& val);

  void __set_ignoreTimeStamp(const bool val);

  void __set_dataTypeList(const std::vector<std::string> & val);

  bool operator == (const TSExecuteStatementResp & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (__isset.operationHandle != rhs.__isset.operationHandle)
      return false;
    else if (__isset.operationHandle && !(operationHandle == rhs.operationHandle))
      return false;
    if (__isset.columns != rhs.__isset.columns)
      return false;
    else if (__isset.columns && !(columns == rhs.columns))
      return false;
    if (__isset.operationType != rhs.__isset.operationType)
      return false;
    else if (__isset.operationType && !(operationType == rhs.operationType))
      return false;
    if (__isset.ignoreTimeStamp != rhs.__isset.ignoreTimeStamp)
      return false;
    else if (__isset.ignoreTimeStamp && !(ignoreTimeStamp == rhs.ignoreTimeStamp))
      return false;
    if (__isset.dataTypeList != rhs.__isset.dataTypeList)
      return false;
    else if (__isset.dataTypeList && !(dataTypeList == rhs.dataTypeList))
      return false;
    return true;
  }
  bool operator != (const TSExecuteStatementResp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TSExecuteStatementResp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TSExecuteStatementResp &a, TSExecuteStatementResp &b);

std::ostream& operator<<(std::ostream& out, const TSExecuteStatementResp& obj);


class TS_SessionHandle : public virtual ::apache::thrift::TBase {
 public:

  TS_SessionHandle(const TS_SessionHandle&);
  TS_SessionHandle& operator=(const TS_SessionHandle&);
  TS_SessionHandle() {
  }

  virtual ~TS_SessionHandle() throw();
  TSHandleIdentifier sessionId;

  void __set_sessionId(const TSHandleIdentifier& val);

  bool operator == (const TS_SessionHandle & rhs) const
  {
    if (!(sessionId == rhs.sessionId))
      return false;
    return true;
  }
  bool operator != (const TS_SessionHandle &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TS_SessionHandle & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TS_SessionHandle &a, TS_SessionHandle &b);

std::ostream& operator<<(std::ostream& out, const TS_SessionHandle& obj);

typedef struct _TSOpenSessionResp__isset {
  _TSOpenSessionResp__isset() : sessionHandle(false), configuration(false) {}
  bool sessionHandle :1;
  bool configuration :1;
} _TSOpenSessionResp__isset;

class TSOpenSessionResp : public virtual ::apache::thrift::TBase {
 public:

  TSOpenSessionResp(const TSOpenSessionResp&);
  TSOpenSessionResp& operator=(const TSOpenSessionResp&);
  TSOpenSessionResp() : serverProtocolVersion((TSProtocolVersion::type)0) {
    serverProtocolVersion = (TSProtocolVersion::type)0;

  }

  virtual ~TSOpenSessionResp() throw();
  TSStatus status;
  TSProtocolVersion::type serverProtocolVersion;
  TS_SessionHandle sessionHandle;
  std::map<std::string, std::string>  configuration;

  _TSOpenSessionResp__isset __isset;

  void __set_status(const TSStatus& val);

  void __set_serverProtocolVersion(const TSProtocolVersion::type val);

  void __set_sessionHandle(const TS_SessionHandle& val);

  void __set_configuration(const std::map<std::string, std::string> & val);

  bool operator == (const TSOpenSessionResp & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(serverProtocolVersion == rhs.serverProtocolVersion))
      return false;
    if (__isset.sessionHandle != rhs.__isset.sessionHandle)
      return false;
    else if (__isset.sessionHandle && !(sessionHandle == rhs.sessionHandle))
      return false;
    if (__isset.configuration != rhs.__isset.configuration)
      return false;
    else if (__isset.configuration && !(configuration == rhs.configuration))
      return false;
    return true;
  }
  bool operator != (const TSOpenSessionResp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TSOpenSessionResp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TSOpenSessionResp &a, TSOpenSessionResp &b);

std::ostream& operator<<(std::ostream& out, const TSOpenSessionResp& obj);

typedef struct _TSOpenSessionReq__isset {
  _TSOpenSessionReq__isset() : username(false), password(false), configuration(false) {}
  bool username :1;
  bool password :1;
  bool configuration :1;
} _TSOpenSessionReq__isset;

class TSOpenSessionReq : public virtual ::apache::thrift::TBase {
 public:

  TSOpenSessionReq(const TSOpenSessionReq&);
  TSOpenSessionReq& operator=(const TSOpenSessionReq&);
  TSOpenSessionReq() : client_protocol((TSProtocolVersion::type)0), username(), password() {
    client_protocol = (TSProtocolVersion::type)0;

  }

  virtual ~TSOpenSessionReq() throw();
  TSProtocolVersion::type client_protocol;
  std::string username;
  std::string password;
  std::map<std::string, std::string>  configuration;

  _TSOpenSessionReq__isset __isset;

  void __set_client_protocol(const TSProtocolVersion::type val);

  void __set_username(const std::string& val);

  void __set_password(const std::string& val);

  void __set_configuration(const std::map<std::string, std::string> & val);

  bool operator == (const TSOpenSessionReq & rhs) const
  {
    if (!(client_protocol == rhs.client_protocol))
      return false;
    if (__isset.username != rhs.__isset.username)
      return false;
    else if (__isset.username && !(username == rhs.username))
      return false;
    if (__isset.password != rhs.__isset.password)
      return false;
    else if (__isset.password && !(password == rhs.password))
      return false;
    if (__isset.configuration != rhs.__isset.configuration)
      return false;
    else if (__isset.configuration && !(configuration == rhs.configuration))
      return false;
    return true;
  }
  bool operator != (const TSOpenSessionReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TSOpenSessionReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TSOpenSessionReq &a, TSOpenSessionReq &b);

std::ostream& operator<<(std::ostream& out, const TSOpenSessionReq& obj);


class TSCloseSessionReq : public virtual ::apache::thrift::TBase {
 public:

  TSCloseSessionReq(const TSCloseSessionReq&);
  TSCloseSessionReq& operator=(const TSCloseSessionReq&);
  TSCloseSessionReq() {
  }

  virtual ~TSCloseSessionReq() throw();
  TS_SessionHandle sessionHandle;

  void __set_sessionHandle(const TS_SessionHandle& val);

  bool operator == (const TSCloseSessionReq & rhs) const
  {
    if (!(sessionHandle == rhs.sessionHandle))
      return false;
    return true;
  }
  bool operator != (const TSCloseSessionReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TSCloseSessionReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TSCloseSessionReq &a, TSCloseSessionReq &b);

std::ostream& operator<<(std::ostream& out, const TSCloseSessionReq& obj);


class TSExecuteStatementReq : public virtual ::apache::thrift::TBase {
 public:

  TSExecuteStatementReq(const TSExecuteStatementReq&);
  TSExecuteStatementReq& operator=(const TSExecuteStatementReq&);
  TSExecuteStatementReq() : statement() {
  }

  virtual ~TSExecuteStatementReq() throw();
  TS_SessionHandle sessionHandle;
  std::string statement;

  void __set_sessionHandle(const TS_SessionHandle& val);

  void __set_statement(const std::string& val);

  bool operator == (const TSExecuteStatementReq & rhs) const
  {
    if (!(sessionHandle == rhs.sessionHandle))
      return false;
    if (!(statement == rhs.statement))
      return false;
    return true;
  }
  bool operator != (const TSExecuteStatementReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TSExecuteStatementReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TSExecuteStatementReq &a, TSExecuteStatementReq &b);

std::ostream& operator<<(std::ostream& out, const TSExecuteStatementReq& obj);

typedef struct _TSExecuteBatchStatementResp__isset {
  _TSExecuteBatchStatementResp__isset() : result(false) {}
  bool result :1;
} _TSExecuteBatchStatementResp__isset;

class TSExecuteBatchStatementResp : public virtual ::apache::thrift::TBase {
 public:

  TSExecuteBatchStatementResp(const TSExecuteBatchStatementResp&);
  TSExecuteBatchStatementResp& operator=(const TSExecuteBatchStatementResp&);
  TSExecuteBatchStatementResp() {
  }

  virtual ~TSExecuteBatchStatementResp() throw();
  TSStatus status;
  std::vector<int32_t>  result;

  _TSExecuteBatchStatementResp__isset __isset;

  void __set_status(const TSStatus& val);

  void __set_result(const std::vector<int32_t> & val);

  bool operator == (const TSExecuteBatchStatementResp & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (__isset.result != rhs.__isset.result)
      return false;
    else if (__isset.result && !(result == rhs.result))
      return false;
    return true;
  }
  bool operator != (const TSExecuteBatchStatementResp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TSExecuteBatchStatementResp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TSExecuteBatchStatementResp &a, TSExecuteBatchStatementResp &b);

std::ostream& operator<<(std::ostream& out, const TSExecuteBatchStatementResp& obj);


class TSExecuteBatchStatementReq : public virtual ::apache::thrift::TBase {
 public:

  TSExecuteBatchStatementReq(const TSExecuteBatchStatementReq&);
  TSExecuteBatchStatementReq& operator=(const TSExecuteBatchStatementReq&);
  TSExecuteBatchStatementReq() {
  }

  virtual ~TSExecuteBatchStatementReq() throw();
  TS_SessionHandle sessionHandle;
  std::vector<std::string>  statements;

  void __set_sessionHandle(const TS_SessionHandle& val);

  void __set_statements(const std::vector<std::string> & val);

  bool operator == (const TSExecuteBatchStatementReq & rhs) const
  {
    if (!(sessionHandle == rhs.sessionHandle))
      return false;
    if (!(statements == rhs.statements))
      return false;
    return true;
  }
  bool operator != (const TSExecuteBatchStatementReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TSExecuteBatchStatementReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TSExecuteBatchStatementReq &a, TSExecuteBatchStatementReq &b);

std::ostream& operator<<(std::ostream& out, const TSExecuteBatchStatementReq& obj);


class TSGetOperationStatusReq : public virtual ::apache::thrift::TBase {
 public:

  TSGetOperationStatusReq(const TSGetOperationStatusReq&);
  TSGetOperationStatusReq& operator=(const TSGetOperationStatusReq&);
  TSGetOperationStatusReq() {
  }

  virtual ~TSGetOperationStatusReq() throw();
  TSOperationHandle operationHandle;

  void __set_operationHandle(const TSOperationHandle& val);

  bool operator == (const TSGetOperationStatusReq & rhs) const
  {
    if (!(operationHandle == rhs.operationHandle))
      return false;
    return true;
  }
  bool operator != (const TSGetOperationStatusReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TSGetOperationStatusReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TSGetOperationStatusReq &a, TSGetOperationStatusReq &b);

std::ostream& operator<<(std::ostream& out, const TSGetOperationStatusReq& obj);


class TSCancelOperationReq : public virtual ::apache::thrift::TBase {
 public:

  TSCancelOperationReq(const TSCancelOperationReq&);
  TSCancelOperationReq& operator=(const TSCancelOperationReq&);
  TSCancelOperationReq() {
  }

  virtual ~TSCancelOperationReq() throw();
  TSOperationHandle operationHandle;

  void __set_operationHandle(const TSOperationHandle& val);

  bool operator == (const TSCancelOperationReq & rhs) const
  {
    if (!(operationHandle == rhs.operationHandle))
      return false;
    return true;
  }
  bool operator != (const TSCancelOperationReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TSCancelOperationReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TSCancelOperationReq &a, TSCancelOperationReq &b);

std::ostream& operator<<(std::ostream& out, const TSCancelOperationReq& obj);

typedef struct _TSCloseOperationReq__isset {
  _TSCloseOperationReq__isset() : stmtId(false) {}
  bool stmtId :1;
} _TSCloseOperationReq__isset;

class TSCloseOperationReq : public virtual ::apache::thrift::TBase {
 public:

  TSCloseOperationReq(const TSCloseOperationReq&);
  TSCloseOperationReq& operator=(const TSCloseOperationReq&);
  TSCloseOperationReq() : queryId(0), stmtId(0) {
  }

  virtual ~TSCloseOperationReq() throw();
  TSOperationHandle operationHandle;
  int64_t queryId;
  int64_t stmtId;

  _TSCloseOperationReq__isset __isset;

  void __set_operationHandle(const TSOperationHandle& val);

  void __set_queryId(const int64_t val);

  void __set_stmtId(const int64_t val);

  bool operator == (const TSCloseOperationReq & rhs) const
  {
    if (!(operationHandle == rhs.operationHandle))
      return false;
    if (!(queryId == rhs.queryId))
      return false;
    if (__isset.stmtId != rhs.__isset.stmtId)
      return false;
    else if (__isset.stmtId && !(stmtId == rhs.stmtId))
      return false;
    return true;
  }
  bool operator != (const TSCloseOperationReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TSCloseOperationReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TSCloseOperationReq &a, TSCloseOperationReq &b);

std::ostream& operator<<(std::ostream& out, const TSCloseOperationReq& obj);

typedef struct _TSDataValue__isset {
  _TSDataValue__isset() : bool_val(false), int_val(false), long_val(false), float_val(false), double_val(false), binary_val(false), type(false) {}
  bool bool_val :1;
  bool int_val :1;
  bool long_val :1;
  bool float_val :1;
  bool double_val :1;
  bool binary_val :1;
  bool type :1;
} _TSDataValue__isset;

class TSDataValue : public virtual ::apache::thrift::TBase {
 public:

  TSDataValue(const TSDataValue&);
  TSDataValue& operator=(const TSDataValue&);
  TSDataValue() : is_empty(0), bool_val(0), int_val(0), long_val(0), float_val(0), double_val(0), binary_val(), type() {
  }

  virtual ~TSDataValue() throw();
  bool is_empty;
  bool bool_val;
  int32_t int_val;
  int64_t long_val;
  double float_val;
  double double_val;
  std::string binary_val;
  std::string type;

  _TSDataValue__isset __isset;

  void __set_is_empty(const bool val);

  void __set_bool_val(const bool val);

  void __set_int_val(const int32_t val);

  void __set_long_val(const int64_t val);

  void __set_float_val(const double val);

  void __set_double_val(const double val);

  void __set_binary_val(const std::string& val);

  void __set_type(const std::string& val);

  bool operator == (const TSDataValue & rhs) const
  {
    if (!(is_empty == rhs.is_empty))
      return false;
    if (__isset.bool_val != rhs.__isset.bool_val)
      return false;
    else if (__isset.bool_val && !(bool_val == rhs.bool_val))
      return false;
    if (__isset.int_val != rhs.__isset.int_val)
      return false;
    else if (__isset.int_val && !(int_val == rhs.int_val))
      return false;
    if (__isset.long_val != rhs.__isset.long_val)
      return false;
    else if (__isset.long_val && !(long_val == rhs.long_val))
      return false;
    if (__isset.float_val != rhs.__isset.float_val)
      return false;
    else if (__isset.float_val && !(float_val == rhs.float_val))
      return false;
    if (__isset.double_val != rhs.__isset.double_val)
      return false;
    else if (__isset.double_val && !(double_val == rhs.double_val))
      return false;
    if (__isset.binary_val != rhs.__isset.binary_val)
      return false;
    else if (__isset.binary_val && !(binary_val == rhs.binary_val))
      return false;
    if (__isset.type != rhs.__isset.type)
      return false;
    else if (__isset.type && !(type == rhs.type))
      return false;
    return true;
  }
  bool operator != (const TSDataValue &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TSDataValue & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TSDataValue &a, TSDataValue &b);

std::ostream& operator<<(std::ostream& out, const TSDataValue& obj);


class TSRowRecord : public virtual ::apache::thrift::TBase {
 public:

  TSRowRecord(const TSRowRecord&);
  TSRowRecord& operator=(const TSRowRecord&);
  TSRowRecord() : timestamp(0) {
  }

  virtual ~TSRowRecord() throw();
  int64_t timestamp;
  std::vector<TSDataValue>  values;

  void __set_timestamp(const int64_t val);

  void __set_values(const std::vector<TSDataValue> & val);

  bool operator == (const TSRowRecord & rhs) const
  {
    if (!(timestamp == rhs.timestamp))
      return false;
    if (!(values == rhs.values))
      return false;
    return true;
  }
  bool operator != (const TSRowRecord &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TSRowRecord & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TSRowRecord &a, TSRowRecord &b);

std::ostream& operator<<(std::ostream& out, const TSRowRecord& obj);


class TSQueryDataSet : public virtual ::apache::thrift::TBase {
 public:

  TSQueryDataSet(const TSQueryDataSet&);
  TSQueryDataSet& operator=(const TSQueryDataSet&);
  TSQueryDataSet() {
  }

  virtual ~TSQueryDataSet() throw();
  std::vector<TSRowRecord>  records;

  void __set_records(const std::vector<TSRowRecord> & val);

  bool operator == (const TSQueryDataSet & rhs) const
  {
    if (!(records == rhs.records))
      return false;
    return true;
  }
  bool operator != (const TSQueryDataSet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TSQueryDataSet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TSQueryDataSet &a, TSQueryDataSet &b);

std::ostream& operator<<(std::ostream& out, const TSQueryDataSet& obj);


class TSFetchResultsReq : public virtual ::apache::thrift::TBase {
 public:

  TSFetchResultsReq(const TSFetchResultsReq&);
  TSFetchResultsReq& operator=(const TSFetchResultsReq&);
  TSFetchResultsReq() : statement(), fetch_size(0), queryId(0) {
  }

  virtual ~TSFetchResultsReq() throw();
  std::string statement;
  int32_t fetch_size;
  int64_t queryId;

  void __set_statement(const std::string& val);

  void __set_fetch_size(const int32_t val);

  void __set_queryId(const int64_t val);

  bool operator == (const TSFetchResultsReq & rhs) const
  {
    if (!(statement == rhs.statement))
      return false;
    if (!(fetch_size == rhs.fetch_size))
      return false;
    if (!(queryId == rhs.queryId))
      return false;
    return true;
  }
  bool operator != (const TSFetchResultsReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TSFetchResultsReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TSFetchResultsReq &a, TSFetchResultsReq &b);

std::ostream& operator<<(std::ostream& out, const TSFetchResultsReq& obj);

typedef struct _TSFetchResultsResp__isset {
  _TSFetchResultsResp__isset() : queryDataSet(false) {}
  bool queryDataSet :1;
} _TSFetchResultsResp__isset;

class TSFetchResultsResp : public virtual ::apache::thrift::TBase {
 public:

  TSFetchResultsResp(const TSFetchResultsResp&);
  TSFetchResultsResp& operator=(const TSFetchResultsResp&);
  TSFetchResultsResp() : hasResultSet(0) {
  }

  virtual ~TSFetchResultsResp() throw();
  TSStatus status;
  bool hasResultSet;
  TSQueryDataSet queryDataSet;

  _TSFetchResultsResp__isset __isset;

  void __set_status(const TSStatus& val);

  void __set_hasResultSet(const bool val);

  void __set_queryDataSet(const TSQueryDataSet& val);

  bool operator == (const TSFetchResultsResp & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(hasResultSet == rhs.hasResultSet))
      return false;
    if (__isset.queryDataSet != rhs.__isset.queryDataSet)
      return false;
    else if (__isset.queryDataSet && !(queryDataSet == rhs.queryDataSet))
      return false;
    return true;
  }
  bool operator != (const TSFetchResultsResp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TSFetchResultsResp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TSFetchResultsResp &a, TSFetchResultsResp &b);

std::ostream& operator<<(std::ostream& out, const TSFetchResultsResp& obj);

typedef struct _TSFetchMetadataResp__isset {
  _TSFetchMetadataResp__isset() : metadataInJson(false), ColumnsList(false), dataType(false), showTimeseriesList(false), showStorageGroups(false), nodesList(false), nodeTimeseriesNum(false) {}
  bool metadataInJson :1;
  bool ColumnsList :1;
  bool dataType :1;
  bool showTimeseriesList :1;
  bool showStorageGroups :1;
  bool nodesList :1;
  bool nodeTimeseriesNum :1;
} _TSFetchMetadataResp__isset;

class TSFetchMetadataResp : public virtual ::apache::thrift::TBase {
 public:

  TSFetchMetadataResp(const TSFetchMetadataResp&);
  TSFetchMetadataResp& operator=(const TSFetchMetadataResp&);
  TSFetchMetadataResp() : metadataInJson(), dataType() {
  }

  virtual ~TSFetchMetadataResp() throw();
  TSStatus status;
  std::string metadataInJson;
  std::vector<std::string>  ColumnsList;
  std::string dataType;
  std::vector<std::vector<std::string> >  showTimeseriesList;
  std::set<std::string>  showStorageGroups;
  std::vector<std::string>  nodesList;
  std::map<std::string, std::string>  nodeTimeseriesNum;

  _TSFetchMetadataResp__isset __isset;

  void __set_status(const TSStatus& val);

  void __set_metadataInJson(const std::string& val);

  void __set_ColumnsList(const std::vector<std::string> & val);

  void __set_dataType(const std::string& val);

  void __set_showTimeseriesList(const std::vector<std::vector<std::string> > & val);

  void __set_showStorageGroups(const std::set<std::string> & val);

  void __set_nodesList(const std::vector<std::string> & val);

  void __set_nodeTimeseriesNum(const std::map<std::string, std::string> & val);

  bool operator == (const TSFetchMetadataResp & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (__isset.metadataInJson != rhs.__isset.metadataInJson)
      return false;
    else if (__isset.metadataInJson && !(metadataInJson == rhs.metadataInJson))
      return false;
    if (__isset.ColumnsList != rhs.__isset.ColumnsList)
      return false;
    else if (__isset.ColumnsList && !(ColumnsList == rhs.ColumnsList))
      return false;
    if (__isset.dataType != rhs.__isset.dataType)
      return false;
    else if (__isset.dataType && !(dataType == rhs.dataType))
      return false;
    if (__isset.showTimeseriesList != rhs.__isset.showTimeseriesList)
      return false;
    else if (__isset.showTimeseriesList && !(showTimeseriesList == rhs.showTimeseriesList))
      return false;
    if (__isset.showStorageGroups != rhs.__isset.showStorageGroups)
      return false;
    else if (__isset.showStorageGroups && !(showStorageGroups == rhs.showStorageGroups))
      return false;
    if (__isset.nodesList != rhs.__isset.nodesList)
      return false;
    else if (__isset.nodesList && !(nodesList == rhs.nodesList))
      return false;
    if (__isset.nodeTimeseriesNum != rhs.__isset.nodeTimeseriesNum)
      return false;
    else if (__isset.nodeTimeseriesNum && !(nodeTimeseriesNum == rhs.nodeTimeseriesNum))
      return false;
    return true;
  }
  bool operator != (const TSFetchMetadataResp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TSFetchMetadataResp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TSFetchMetadataResp &a, TSFetchMetadataResp &b);

std::ostream& operator<<(std::ostream& out, const TSFetchMetadataResp& obj);

typedef struct _TSFetchMetadataReq__isset {
  _TSFetchMetadataReq__isset() : columnPath(false), nodeLevel(false) {}
  bool columnPath :1;
  bool nodeLevel :1;
} _TSFetchMetadataReq__isset;

class TSFetchMetadataReq : public virtual ::apache::thrift::TBase {
 public:

  TSFetchMetadataReq(const TSFetchMetadataReq&);
  TSFetchMetadataReq& operator=(const TSFetchMetadataReq&);
  TSFetchMetadataReq() : type(), columnPath(), nodeLevel() {
  }

  virtual ~TSFetchMetadataReq() throw();
  std::string type;
  std::string columnPath;
  std::string nodeLevel;

  _TSFetchMetadataReq__isset __isset;

  void __set_type(const std::string& val);

  void __set_columnPath(const std::string& val);

  void __set_nodeLevel(const std::string& val);

  bool operator == (const TSFetchMetadataReq & rhs) const
  {
    if (!(type == rhs.type))
      return false;
    if (__isset.columnPath != rhs.__isset.columnPath)
      return false;
    else if (__isset.columnPath && !(columnPath == rhs.columnPath))
      return false;
    if (__isset.nodeLevel != rhs.__isset.nodeLevel)
      return false;
    else if (__isset.nodeLevel && !(nodeLevel == rhs.nodeLevel))
      return false;
    return true;
  }
  bool operator != (const TSFetchMetadataReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TSFetchMetadataReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TSFetchMetadataReq &a, TSFetchMetadataReq &b);

std::ostream& operator<<(std::ostream& out, const TSFetchMetadataReq& obj);

typedef struct _TSColumnSchema__isset {
  _TSColumnSchema__isset() : name(false), dataType(false), encoding(false), otherArgs(false) {}
  bool name :1;
  bool dataType :1;
  bool encoding :1;
  bool otherArgs :1;
} _TSColumnSchema__isset;

class TSColumnSchema : public virtual ::apache::thrift::TBase {
 public:

  TSColumnSchema(const TSColumnSchema&);
  TSColumnSchema& operator=(const TSColumnSchema&);
  TSColumnSchema() : name(), dataType(), encoding() {
  }

  virtual ~TSColumnSchema() throw();
  std::string name;
  std::string dataType;
  std::string encoding;
  std::map<std::string, std::string>  otherArgs;

  _TSColumnSchema__isset __isset;

  void __set_name(const std::string& val);

  void __set_dataType(const std::string& val);

  void __set_encoding(const std::string& val);

  void __set_otherArgs(const std::map<std::string, std::string> & val);

  bool operator == (const TSColumnSchema & rhs) const
  {
    if (__isset.name != rhs.__isset.name)
      return false;
    else if (__isset.name && !(name == rhs.name))
      return false;
    if (__isset.dataType != rhs.__isset.dataType)
      return false;
    else if (__isset.dataType && !(dataType == rhs.dataType))
      return false;
    if (__isset.encoding != rhs.__isset.encoding)
      return false;
    else if (__isset.encoding && !(encoding == rhs.encoding))
      return false;
    if (__isset.otherArgs != rhs.__isset.otherArgs)
      return false;
    else if (__isset.otherArgs && !(otherArgs == rhs.otherArgs))
      return false;
    return true;
  }
  bool operator != (const TSColumnSchema &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TSColumnSchema & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TSColumnSchema &a, TSColumnSchema &b);

std::ostream& operator<<(std::ostream& out, const TSColumnSchema& obj);


class TSGetTimeZoneResp : public virtual ::apache::thrift::TBase {
 public:

  TSGetTimeZoneResp(const TSGetTimeZoneResp&);
  TSGetTimeZoneResp& operator=(const TSGetTimeZoneResp&);
  TSGetTimeZoneResp() : timeZone() {
  }

  virtual ~TSGetTimeZoneResp() throw();
  TSStatus status;
  std::string timeZone;

  void __set_status(const TSStatus& val);

  void __set_timeZone(const std::string& val);

  bool operator == (const TSGetTimeZoneResp & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(timeZone == rhs.timeZone))
      return false;
    return true;
  }
  bool operator != (const TSGetTimeZoneResp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TSGetTimeZoneResp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TSGetTimeZoneResp &a, TSGetTimeZoneResp &b);

std::ostream& operator<<(std::ostream& out, const TSGetTimeZoneResp& obj);


class TSSetTimeZoneReq : public virtual ::apache::thrift::TBase {
 public:

  TSSetTimeZoneReq(const TSSetTimeZoneReq&);
  TSSetTimeZoneReq& operator=(const TSSetTimeZoneReq&);
  TSSetTimeZoneReq() : timeZone() {
  }

  virtual ~TSSetTimeZoneReq() throw();
  std::string timeZone;

  void __set_timeZone(const std::string& val);

  bool operator == (const TSSetTimeZoneReq & rhs) const
  {
    if (!(timeZone == rhs.timeZone))
      return false;
    return true;
  }
  bool operator != (const TSSetTimeZoneReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TSSetTimeZoneReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TSSetTimeZoneReq &a, TSSetTimeZoneReq &b);

std::ostream& operator<<(std::ostream& out, const TSSetTimeZoneReq& obj);

typedef struct _TSInsertionReq__isset {
  _TSInsertionReq__isset() : deviceId(false), measurements(false), values(false), timestamp(false) {}
  bool deviceId :1;
  bool measurements :1;
  bool values :1;
  bool timestamp :1;
} _TSInsertionReq__isset;

class TSInsertionReq : public virtual ::apache::thrift::TBase {
 public:

  TSInsertionReq(const TSInsertionReq&);
  TSInsertionReq& operator=(const TSInsertionReq&);
  TSInsertionReq() : deviceId(), timestamp(0), stmtId(0) {
  }

  virtual ~TSInsertionReq() throw();
  std::string deviceId;
  std::vector<std::string>  measurements;
  std::vector<std::string>  values;
  int64_t timestamp;
  int64_t stmtId;

  _TSInsertionReq__isset __isset;

  void __set_deviceId(const std::string& val);

  void __set_measurements(const std::vector<std::string> & val);

  void __set_values(const std::vector<std::string> & val);

  void __set_timestamp(const int64_t val);

  void __set_stmtId(const int64_t val);

  bool operator == (const TSInsertionReq & rhs) const
  {
    if (__isset.deviceId != rhs.__isset.deviceId)
      return false;
    else if (__isset.deviceId && !(deviceId == rhs.deviceId))
      return false;
    if (__isset.measurements != rhs.__isset.measurements)
      return false;
    else if (__isset.measurements && !(measurements == rhs.measurements))
      return false;
    if (__isset.values != rhs.__isset.values)
      return false;
    else if (__isset.values && !(values == rhs.values))
      return false;
    if (__isset.timestamp != rhs.__isset.timestamp)
      return false;
    else if (__isset.timestamp && !(timestamp == rhs.timestamp))
      return false;
    if (!(stmtId == rhs.stmtId))
      return false;
    return true;
  }
  bool operator != (const TSInsertionReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TSInsertionReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TSInsertionReq &a, TSInsertionReq &b);

std::ostream& operator<<(std::ostream& out, const TSInsertionReq& obj);


class TSBatchInsertionReq : public virtual ::apache::thrift::TBase {
 public:

  TSBatchInsertionReq(const TSBatchInsertionReq&);
  TSBatchInsertionReq& operator=(const TSBatchInsertionReq&);
  TSBatchInsertionReq() : deviceId(), values(), timestamps(), size(0) {
  }

  virtual ~TSBatchInsertionReq() throw();
  std::string deviceId;
  std::vector<std::string>  measurements;
  std::string values;
  std::string timestamps;
  std::vector<int32_t>  types;
  int32_t size;

  void __set_deviceId(const std::string& val);

  void __set_measurements(const std::vector<std::string> & val);

  void __set_values(const std::string& val);

  void __set_timestamps(const std::string& val);

  void __set_types(const std::vector<int32_t> & val);

  void __set_size(const int32_t val);

  bool operator == (const TSBatchInsertionReq & rhs) const
  {
    if (!(deviceId == rhs.deviceId))
      return false;
    if (!(measurements == rhs.measurements))
      return false;
    if (!(values == rhs.values))
      return false;
    if (!(timestamps == rhs.timestamps))
      return false;
    if (!(types == rhs.types))
      return false;
    if (!(size == rhs.size))
      return false;
    return true;
  }
  bool operator != (const TSBatchInsertionReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TSBatchInsertionReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TSBatchInsertionReq &a, TSBatchInsertionReq &b);

std::ostream& operator<<(std::ostream& out, const TSBatchInsertionReq& obj);


class TSInsertReq : public virtual ::apache::thrift::TBase {
 public:

  TSInsertReq(const TSInsertReq&);
  TSInsertReq& operator=(const TSInsertReq&);
  TSInsertReq() : deviceId(), timestamp(0) {
  }

  virtual ~TSInsertReq() throw();
  std::string deviceId;
  std::vector<std::string>  measurements;
  std::vector<std::string>  values;
  int64_t timestamp;

  void __set_deviceId(const std::string& val);

  void __set_measurements(const std::vector<std::string> & val);

  void __set_values(const std::vector<std::string> & val);

  void __set_timestamp(const int64_t val);

  bool operator == (const TSInsertReq & rhs) const
  {
    if (!(deviceId == rhs.deviceId))
      return false;
    if (!(measurements == rhs.measurements))
      return false;
    if (!(values == rhs.values))
      return false;
    if (!(timestamp == rhs.timestamp))
      return false;
    return true;
  }
  bool operator != (const TSInsertReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TSInsertReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TSInsertReq &a, TSInsertReq &b);

std::ostream& operator<<(std::ostream& out, const TSInsertReq& obj);


class TSDeleteDataReq : public virtual ::apache::thrift::TBase {
 public:

  TSDeleteDataReq(const TSDeleteDataReq&);
  TSDeleteDataReq& operator=(const TSDeleteDataReq&);
  TSDeleteDataReq() : timestamp(0) {
  }

  virtual ~TSDeleteDataReq() throw();
  std::vector<std::string>  paths;
  int64_t timestamp;

  void __set_paths(const std::vector<std::string> & val);

  void __set_timestamp(const int64_t val);

  bool operator == (const TSDeleteDataReq & rhs) const
  {
    if (!(paths == rhs.paths))
      return false;
    if (!(timestamp == rhs.timestamp))
      return false;
    return true;
  }
  bool operator != (const TSDeleteDataReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TSDeleteDataReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TSDeleteDataReq &a, TSDeleteDataReq &b);

std::ostream& operator<<(std::ostream& out, const TSDeleteDataReq& obj);


class TSCreateTimeseriesReq : public virtual ::apache::thrift::TBase {
 public:

  TSCreateTimeseriesReq(const TSCreateTimeseriesReq&);
  TSCreateTimeseriesReq& operator=(const TSCreateTimeseriesReq&);
  TSCreateTimeseriesReq() : path(), dataType(0), encoding(0), compressor(0) {
  }

  virtual ~TSCreateTimeseriesReq() throw();
  std::string path;
  int32_t dataType;
  int32_t encoding;
  int32_t compressor;

  void __set_path(const std::string& val);

  void __set_dataType(const int32_t val);

  void __set_encoding(const int32_t val);

  void __set_compressor(const int32_t val);

  bool operator == (const TSCreateTimeseriesReq & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    if (!(dataType == rhs.dataType))
      return false;
    if (!(encoding == rhs.encoding))
      return false;
    if (!(compressor == rhs.compressor))
      return false;
    return true;
  }
  bool operator != (const TSCreateTimeseriesReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TSCreateTimeseriesReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TSCreateTimeseriesReq &a, TSCreateTimeseriesReq &b);

std::ostream& operator<<(std::ostream& out, const TSCreateTimeseriesReq& obj);


class ServerProperties : public virtual ::apache::thrift::TBase {
 public:

  ServerProperties(const ServerProperties&);
  ServerProperties& operator=(const ServerProperties&);
  ServerProperties() : version(), timestampPrecision() {
  }

  virtual ~ServerProperties() throw();
  std::string version;
  std::vector<std::string>  supportedTimeAggregationOperations;
  std::string timestampPrecision;

  void __set_version(const std::string& val);

  void __set_supportedTimeAggregationOperations(const std::vector<std::string> & val);

  void __set_timestampPrecision(const std::string& val);

  bool operator == (const ServerProperties & rhs) const
  {
    if (!(version == rhs.version))
      return false;
    if (!(supportedTimeAggregationOperations == rhs.supportedTimeAggregationOperations))
      return false;
    if (!(timestampPrecision == rhs.timestampPrecision))
      return false;
    return true;
  }
  bool operator != (const ServerProperties &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServerProperties & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ServerProperties &a, ServerProperties &b);

std::ostream& operator<<(std::ostream& out, const ServerProperties& obj);



#endif
